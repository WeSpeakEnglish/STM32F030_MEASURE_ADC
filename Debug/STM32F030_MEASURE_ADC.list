
STM32F030_MEASURE_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000494c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a88  08004a88  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a88  08004a88  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a88  08004a88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a8c  08004a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000070  08004b00  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08004b00  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb1c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002737  00000000  00000000  0002fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000330d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b8b  00000000  00000000  00033d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001230d  00000000  00000000  00045903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068412  00000000  00000000  00057c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b8  00000000  00000000  000c0074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049f4 	.word	0x080049f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080049f4 	.word	0x080049f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	0018      	movs	r0, r3
 800024e:	230c      	movs	r3, #12
 8000250:	001a      	movs	r2, r3
 8000252:	2100      	movs	r1, #0
 8000254:	f003 ff5c 	bl	8004110 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000258:	4b94      	ldr	r3, [pc, #592]	; (80004ac <MX_ADC_Init+0x268>)
 800025a:	4a95      	ldr	r2, [pc, #596]	; (80004b0 <MX_ADC_Init+0x26c>)
 800025c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800025e:	4b93      	ldr	r3, [pc, #588]	; (80004ac <MX_ADC_Init+0x268>)
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000264:	4b91      	ldr	r3, [pc, #580]	; (80004ac <MX_ADC_Init+0x268>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026a:	4b90      	ldr	r3, [pc, #576]	; (80004ac <MX_ADC_Init+0x268>)
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000270:	4b8e      	ldr	r3, [pc, #568]	; (80004ac <MX_ADC_Init+0x268>)
 8000272:	2201      	movs	r2, #1
 8000274:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000276:	4b8d      	ldr	r3, [pc, #564]	; (80004ac <MX_ADC_Init+0x268>)
 8000278:	2208      	movs	r2, #8
 800027a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800027c:	4b8b      	ldr	r3, [pc, #556]	; (80004ac <MX_ADC_Init+0x268>)
 800027e:	2200      	movs	r2, #0
 8000280:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000282:	4b8a      	ldr	r3, [pc, #552]	; (80004ac <MX_ADC_Init+0x268>)
 8000284:	2200      	movs	r2, #0
 8000286:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000288:	4b88      	ldr	r3, [pc, #544]	; (80004ac <MX_ADC_Init+0x268>)
 800028a:	2201      	movs	r2, #1
 800028c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800028e:	4b87      	ldr	r3, [pc, #540]	; (80004ac <MX_ADC_Init+0x268>)
 8000290:	2200      	movs	r2, #0
 8000292:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000294:	4b85      	ldr	r3, [pc, #532]	; (80004ac <MX_ADC_Init+0x268>)
 8000296:	22c2      	movs	r2, #194	; 0xc2
 8000298:	32ff      	adds	r2, #255	; 0xff
 800029a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800029c:	4b83      	ldr	r3, [pc, #524]	; (80004ac <MX_ADC_Init+0x268>)
 800029e:	2200      	movs	r2, #0
 80002a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80002a2:	4b82      	ldr	r3, [pc, #520]	; (80004ac <MX_ADC_Init+0x268>)
 80002a4:	2224      	movs	r2, #36	; 0x24
 80002a6:	2100      	movs	r1, #0
 80002a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002aa:	4b80      	ldr	r3, [pc, #512]	; (80004ac <MX_ADC_Init+0x268>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002b0:	4b7e      	ldr	r3, [pc, #504]	; (80004ac <MX_ADC_Init+0x268>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fe4a 	bl	8000f4c <HAL_ADC_Init>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80002bc:	f000 fb5e 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0152      	lsls	r2, r2, #5
 80002cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2202      	movs	r2, #2
 80002d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002d4:	1d3a      	adds	r2, r7, #4
 80002d6:	4b75      	ldr	r3, [pc, #468]	; (80004ac <MX_ADC_Init+0x268>)
 80002d8:	0011      	movs	r1, r2
 80002da:	0018      	movs	r0, r3
 80002dc:	f001 f808 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d001      	beq.n	80002e8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80002e4:	f000 fb4a 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ee:	1d3a      	adds	r2, r7, #4
 80002f0:	4b6e      	ldr	r3, [pc, #440]	; (80004ac <MX_ADC_Init+0x268>)
 80002f2:	0011      	movs	r1, r2
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fffb 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80002fe:	f000 fb3d 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2202      	movs	r2, #2
 8000306:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000308:	1d3a      	adds	r2, r7, #4
 800030a:	4b68      	ldr	r3, [pc, #416]	; (80004ac <MX_ADC_Init+0x268>)
 800030c:	0011      	movs	r1, r2
 800030e:	0018      	movs	r0, r3
 8000310:	f000 ffee 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000318:	f000 fb30 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2203      	movs	r2, #3
 8000320:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000322:	1d3a      	adds	r2, r7, #4
 8000324:	4b61      	ldr	r3, [pc, #388]	; (80004ac <MX_ADC_Init+0x268>)
 8000326:	0011      	movs	r1, r2
 8000328:	0018      	movs	r0, r3
 800032a:	f000 ffe1 	bl	80012f0 <HAL_ADC_ConfigChannel>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000332:	f000 fb23 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2204      	movs	r2, #4
 800033a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800033c:	1d3a      	adds	r2, r7, #4
 800033e:	4b5b      	ldr	r3, [pc, #364]	; (80004ac <MX_ADC_Init+0x268>)
 8000340:	0011      	movs	r1, r2
 8000342:	0018      	movs	r0, r3
 8000344:	f000 ffd4 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800034c:	f000 fb16 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2205      	movs	r2, #5
 8000354:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000356:	1d3a      	adds	r2, r7, #4
 8000358:	4b54      	ldr	r3, [pc, #336]	; (80004ac <MX_ADC_Init+0x268>)
 800035a:	0011      	movs	r1, r2
 800035c:	0018      	movs	r0, r3
 800035e:	f000 ffc7 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8000366:	f000 fb09 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2206      	movs	r2, #6
 800036e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000370:	1d3a      	adds	r2, r7, #4
 8000372:	4b4e      	ldr	r3, [pc, #312]	; (80004ac <MX_ADC_Init+0x268>)
 8000374:	0011      	movs	r1, r2
 8000376:	0018      	movs	r0, r3
 8000378:	f000 ffba 	bl	80012f0 <HAL_ADC_ConfigChannel>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000380:	f000 fafc 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2207      	movs	r2, #7
 8000388:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800038a:	1d3a      	adds	r2, r7, #4
 800038c:	4b47      	ldr	r3, [pc, #284]	; (80004ac <MX_ADC_Init+0x268>)
 800038e:	0011      	movs	r1, r2
 8000390:	0018      	movs	r0, r3
 8000392:	f000 ffad 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800039a:	f000 faef 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2208      	movs	r2, #8
 80003a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003a4:	1d3a      	adds	r2, r7, #4
 80003a6:	4b41      	ldr	r3, [pc, #260]	; (80004ac <MX_ADC_Init+0x268>)
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 ffa0 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80003b4:	f000 fae2 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2209      	movs	r2, #9
 80003bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003be:	1d3a      	adds	r2, r7, #4
 80003c0:	4b3a      	ldr	r3, [pc, #232]	; (80004ac <MX_ADC_Init+0x268>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 ff93 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80003ce:	f000 fad5 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	220a      	movs	r2, #10
 80003d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003d8:	1d3a      	adds	r2, r7, #4
 80003da:	4b34      	ldr	r3, [pc, #208]	; (80004ac <MX_ADC_Init+0x268>)
 80003dc:	0011      	movs	r1, r2
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 ff86 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 80003e8:	f000 fac8 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	220b      	movs	r2, #11
 80003f0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003f2:	1d3a      	adds	r2, r7, #4
 80003f4:	4b2d      	ldr	r3, [pc, #180]	; (80004ac <MX_ADC_Init+0x268>)
 80003f6:	0011      	movs	r1, r2
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 ff79 	bl	80012f0 <HAL_ADC_ConfigChannel>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 8000402:	f000 fabb 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	220c      	movs	r2, #12
 800040a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800040c:	1d3a      	adds	r2, r7, #4
 800040e:	4b27      	ldr	r3, [pc, #156]	; (80004ac <MX_ADC_Init+0x268>)
 8000410:	0011      	movs	r1, r2
 8000412:	0018      	movs	r0, r3
 8000414:	f000 ff6c 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 800041c:	f000 faae 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	220d      	movs	r2, #13
 8000424:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000426:	1d3a      	adds	r2, r7, #4
 8000428:	4b20      	ldr	r3, [pc, #128]	; (80004ac <MX_ADC_Init+0x268>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f000 ff5f 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 8000436:	f000 faa1 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	220e      	movs	r2, #14
 800043e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000440:	1d3a      	adds	r2, r7, #4
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <MX_ADC_Init+0x268>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f000 ff52 	bl	80012f0 <HAL_ADC_ConfigChannel>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d001      	beq.n	8000454 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8000450:	f000 fa94 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	220f      	movs	r2, #15
 8000458:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800045a:	1d3a      	adds	r2, r7, #4
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_ADC_Init+0x268>)
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f000 ff45 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 800046a:	f000 fa87 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2210      	movs	r2, #16
 8000472:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000474:	1d3a      	adds	r2, r7, #4
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <MX_ADC_Init+0x268>)
 8000478:	0011      	movs	r1, r2
 800047a:	0018      	movs	r0, r3
 800047c:	f000 ff38 	bl	80012f0 <HAL_ADC_ConfigChannel>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC_Init+0x244>
  {
    Error_Handler();
 8000484:	f000 fa7a 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2211      	movs	r2, #17
 800048c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800048e:	1d3a      	adds	r2, r7, #4
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_ADC_Init+0x268>)
 8000492:	0011      	movs	r1, r2
 8000494:	0018      	movs	r0, r3
 8000496:	f000 ff2b 	bl	80012f0 <HAL_ADC_ConfigChannel>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC_Init+0x25e>
  {
    Error_Handler();
 800049e:	f000 fa6d 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b004      	add	sp, #16
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	2000008c 	.word	0x2000008c
 80004b0:	40012400 	.word	0x40012400

080004b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b08d      	sub	sp, #52	; 0x34
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	241c      	movs	r4, #28
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	0018      	movs	r0, r3
 80004c2:	2314      	movs	r3, #20
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f003 fe22 	bl	8004110 <memset>
  if(adcHandle->Instance==ADC1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a4a      	ldr	r2, [pc, #296]	; (80005fc <HAL_ADC_MspInit+0x148>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d000      	beq.n	80004d8 <HAL_ADC_MspInit+0x24>
 80004d6:	e08d      	b.n	80005f4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004d8:	4b49      	ldr	r3, [pc, #292]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 80004da:	699a      	ldr	r2, [r3, #24]
 80004dc:	4b48      	ldr	r3, [pc, #288]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	0089      	lsls	r1, r1, #2
 80004e2:	430a      	orrs	r2, r1
 80004e4:	619a      	str	r2, [r3, #24]
 80004e6:	4b46      	ldr	r3, [pc, #280]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 80004e8:	699a      	ldr	r2, [r3, #24]
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	4013      	ands	r3, r2
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f4:	4b42      	ldr	r3, [pc, #264]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	4b41      	ldr	r3, [pc, #260]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0309      	lsls	r1, r1, #12
 80004fe:	430a      	orrs	r2, r1
 8000500:	615a      	str	r2, [r3, #20]
 8000502:	4b3f      	ldr	r3, [pc, #252]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	031b      	lsls	r3, r3, #12
 800050a:	4013      	ands	r3, r2
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	4b3a      	ldr	r3, [pc, #232]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0289      	lsls	r1, r1, #10
 800051a:	430a      	orrs	r2, r1
 800051c:	615a      	str	r2, [r3, #20]
 800051e:	4b38      	ldr	r3, [pc, #224]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	029b      	lsls	r3, r3, #10
 8000526:	4013      	ands	r3, r2
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800052c:	4b34      	ldr	r3, [pc, #208]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	4b33      	ldr	r3, [pc, #204]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	02c9      	lsls	r1, r1, #11
 8000536:	430a      	orrs	r2, r1
 8000538:	615a      	str	r2, [r3, #20]
 800053a:	4b31      	ldr	r3, [pc, #196]	; (8000600 <HAL_ADC_MspInit+0x14c>)
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	02db      	lsls	r3, r3, #11
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000548:	193b      	adds	r3, r7, r4
 800054a:	223f      	movs	r2, #63	; 0x3f
 800054c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2203      	movs	r2, #3
 8000552:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055a:	193b      	adds	r3, r7, r4
 800055c:	4a29      	ldr	r2, [pc, #164]	; (8000604 <HAL_ADC_MspInit+0x150>)
 800055e:	0019      	movs	r1, r3
 8000560:	0010      	movs	r0, r2
 8000562:	f001 fc5f 	bl	8001e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000566:	193b      	adds	r3, r7, r4
 8000568:	22ff      	movs	r2, #255	; 0xff
 800056a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2203      	movs	r2, #3
 8000570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	193a      	adds	r2, r7, r4
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fc4f 	bl	8001e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000586:	193b      	adds	r3, r7, r4
 8000588:	2203      	movs	r2, #3
 800058a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2203      	movs	r2, #3
 8000590:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	193b      	adds	r3, r7, r4
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000598:	193b      	adds	r3, r7, r4
 800059a:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <HAL_ADC_MspInit+0x154>)
 800059c:	0019      	movs	r1, r3
 800059e:	0010      	movs	r0, r2
 80005a0:	f001 fc40 	bl	8001e24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005a6:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <HAL_ADC_MspInit+0x15c>)
 80005a8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	0052      	lsls	r2, r2, #1
 80005c2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	00d2      	lsls	r2, r2, #3
 80005ca:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 fa0c 	bl	80019f8 <HAL_DMA_Init>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80005e4:	f000 f9ca 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_ADC_MspInit+0x158>)
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b00d      	add	sp, #52	; 0x34
 80005fa:	bd90      	pop	{r4, r7, pc}
 80005fc:	40012400 	.word	0x40012400
 8000600:	40021000 	.word	0x40021000
 8000604:	48000800 	.word	0x48000800
 8000608:	48000400 	.word	0x48000400
 800060c:	200000cc 	.word	0x200000cc
 8000610:	40020008 	.word	0x40020008

08000614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_DMA_Init+0x48>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_DMA_Init+0x48>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_DMA_Init+0x48>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	2009      	movs	r0, #9
 8000638:	f001 f9ac 	bl	8001994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800063c:	2009      	movs	r0, #9
 800063e:	f001 f9be 	bl	80019be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	200a      	movs	r0, #10
 8000648:	f001 f9a4 	bl	8001994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800064c:	200a      	movs	r0, #10
 800064e:	f001 f9b6 	bl	80019be <HAL_NVIC_EnableIRQ>

}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	40021000 	.word	0x40021000

08000660 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	240c      	movs	r4, #12
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2314      	movs	r3, #20
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 fd4d 	bl	8004110 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_GPIO_Init+0xac>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b24      	ldr	r3, [pc, #144]	; (800070c <MX_GPIO_Init+0xac>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0309      	lsls	r1, r1, #12
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_GPIO_Init+0xac>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	031b      	lsls	r3, r3, #12
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_GPIO_Init+0xac>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_GPIO_Init+0xac>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0289      	lsls	r1, r1, #10
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_GPIO_Init+0xac>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_GPIO_Init+0xac>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_GPIO_Init+0xac>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	02c9      	lsls	r1, r1, #11
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_GPIO_Init+0xac>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	02db      	lsls	r3, r3, #11
 80006c4:	4013      	ands	r3, r2
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006ca:	23f8      	movs	r3, #248	; 0xf8
 80006cc:	0159      	lsls	r1, r3, #5
 80006ce:	2390      	movs	r3, #144	; 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2200      	movs	r2, #0
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fd15 	bl	8002104 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	22f8      	movs	r2, #248	; 0xf8
 80006de:	0152      	lsls	r2, r2, #5
 80006e0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2201      	movs	r2, #1
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	193a      	adds	r2, r7, r4
 80006f6:	2390      	movs	r3, #144	; 0x90
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fb91 	bl	8001e24 <HAL_GPIO_Init>

}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b009      	add	sp, #36	; 0x24
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40021000 	.word	0x40021000

08000710 <getADC_data>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getADC_data(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	  if(HAL_ADC_Start_DMA(&hadc, (uint32_t *)adcBuffer, ADC_CNANNELS) != HAL_OK)
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <getADC_data+0x20>)
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <getADC_data+0x24>)
 8000718:	2210      	movs	r2, #16
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fd56 	bl	80011cc <HAL_ADC_Start_DMA>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <getADC_data+0x18>
		  Error_Handler();
 8000724:	f000 f92a 	bl	800097c <Error_Handler>
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	20000110 	.word	0x20000110
 8000734:	2000008c 	.word	0x2000008c

08000738 <printUART>:

void printUART(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	txBufferUART[0] = '\0';
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <printUART+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	sprintf(txBufferUART,"%ld,",countADC_bufferN);
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <printUART+0xa4>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4925      	ldr	r1, [pc, #148]	; (80007e0 <printUART+0xa8>)
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <printUART+0xa0>)
 800074c:	0018      	movs	r0, r3
 800074e:	f003 fce7 	bl	8004120 <siprintf>
	for(int i = 0; i < ADC_CNANNELS; i++){
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	e028      	b.n	80007aa <printUART+0x72>
		if(i < ADC_CNANNELS - 1 )
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b0e      	cmp	r3, #14
 800075c:	dc11      	bgt.n	8000782 <printUART+0x4a>
			sprintf(&txBufferUART[strlen(txBufferUART)],"%d,",adcBuffer[i]);
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <printUART+0xa0>)
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fcd1 	bl	8000108 <strlen>
 8000766:	0002      	movs	r2, r0
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <printUART+0xa0>)
 800076a:	18d0      	adds	r0, r2, r3
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <printUART+0xac>)
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	5ad3      	ldrh	r3, [r2, r3]
 8000774:	b29b      	uxth	r3, r3
 8000776:	001a      	movs	r2, r3
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <printUART+0xb0>)
 800077a:	0019      	movs	r1, r3
 800077c:	f003 fcd0 	bl	8004120 <siprintf>
 8000780:	e010      	b.n	80007a4 <printUART+0x6c>
		else
			sprintf(&txBufferUART[strlen(txBufferUART)],"%d\n",adcBuffer[i]);
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <printUART+0xa0>)
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff fcbf 	bl	8000108 <strlen>
 800078a:	0002      	movs	r2, r0
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <printUART+0xa0>)
 800078e:	18d0      	adds	r0, r2, r3
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <printUART+0xac>)
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	0052      	lsls	r2, r2, #1
 8000796:	5ad3      	ldrh	r3, [r2, r3]
 8000798:	b29b      	uxth	r3, r3
 800079a:	001a      	movs	r2, r3
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <printUART+0xb4>)
 800079e:	0019      	movs	r1, r3
 80007a0:	f003 fcbe 	bl	8004120 <siprintf>
	for(int i = 0; i < ADC_CNANNELS; i++){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	ddd3      	ble.n	8000758 <printUART+0x20>
	}
	if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)txBufferUART, strlen(txBufferUART)) != HAL_OK)
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <printUART+0xa0>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff fca8 	bl	8000108 <strlen>
 80007b8:	0003      	movs	r3, r0
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	4906      	ldr	r1, [pc, #24]	; (80007d8 <printUART+0xa0>)
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <printUART+0xb8>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fca3 	bl	800310c <HAL_UART_Transmit_DMA>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <printUART+0x96>
		Error_Handler();
 80007ca:	f000 f8d7 	bl	800097c <Error_Handler>
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	20000134 	.word	0x20000134
 80007dc:	20000130 	.word	0x20000130
 80007e0:	08004a0c 	.word	0x08004a0c
 80007e4:	20000110 	.word	0x20000110
 80007e8:	08004a14 	.word	0x08004a14
 80007ec:	08004a18 	.word	0x08004a18
 80007f0:	20000290 	.word	0x20000290

080007f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  ;
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}

08000804 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  ;
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 fb34 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f826 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f7ff ff1e 	bl	8000660 <MX_GPIO_Init>
  MX_DMA_Init();
 8000824:	f7ff fef6 	bl	8000614 <MX_DMA_Init>
  MX_ADC_Init();
 8000828:	f7ff fd0c 	bl	8000244 <MX_ADC_Init>
  MX_USART1_UART_Init();
 800082c:	f000 fa26 	bl	8000c7c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000830:	f000 f9d6 	bl	8000be0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <main+0x50>)
 8000836:	0018      	movs	r0, r3
 8000838:	f000 ff58 	bl	80016ec <HAL_ADCEx_Calibration_Start>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <main+0x30>
	  Error_Handler();
 8000840:	f000 f89c 	bl	800097c <Error_Handler>

  if(HAL_TIM_Base_Start_IT(&htim14) != HAL_OK)
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <main+0x54>)
 8000846:	0018      	movs	r0, r3
 8000848:	f002 fa04 	bl	8002c54 <HAL_TIM_Base_Start_IT>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <main+0x40>
	  Error_Handler();
 8000850:	f000 f894 	bl	800097c <Error_Handler>

  pFastQueueIni();
 8000854:	f000 f89c 	bl	8000990 <pFastQueueIni>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  F_pull()();
 8000858:	f000 f8e4 	bl	8000a24 <F_pull>
 800085c:	0003      	movs	r3, r0
 800085e:	4798      	blx	r3
 8000860:	e7fa      	b.n	8000858 <main+0x44>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	2000008c 	.word	0x2000008c
 8000868:	20000248 	.word	0x20000248

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b095      	sub	sp, #84	; 0x54
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	2420      	movs	r4, #32
 8000874:	193b      	adds	r3, r7, r4
 8000876:	0018      	movs	r0, r3
 8000878:	2330      	movs	r3, #48	; 0x30
 800087a:	001a      	movs	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f003 fc47 	bl	8004110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000882:	2310      	movs	r3, #16
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0018      	movs	r0, r3
 8000888:	2310      	movs	r3, #16
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f003 fc3f 	bl	8004110 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000892:	003b      	movs	r3, r7
 8000894:	0018      	movs	r0, r3
 8000896:	2310      	movs	r3, #16
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f003 fc38 	bl	8004110 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80008a0:	0021      	movs	r1, r4
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2212      	movs	r2, #18
 80008a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2201      	movs	r2, #1
 80008ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2201      	movs	r2, #1
 80008b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2210      	movs	r2, #16
 80008b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2210      	movs	r2, #16
 80008be:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 fc39 	bl	8002140 <HAL_RCC_OscConfig>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008d2:	f000 f853 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	2110      	movs	r1, #16
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2207      	movs	r2, #7
 80008dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 ff3d 	bl	8002774 <HAL_RCC_ClockConfig>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008fe:	f000 f83d 	bl	800097c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000902:	003b      	movs	r3, r7
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000908:	003b      	movs	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090e:	003b      	movs	r3, r7
 8000910:	0018      	movs	r0, r3
 8000912:	f002 f881 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800091a:	f000 f82f 	bl	800097c <Error_Handler>
  }
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b015      	add	sp, #84	; 0x54
 8000924:	bd90      	pop	{r4, r7, pc}
	...

08000928 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	++countADC_bufferN;
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000938:	601a      	str	r2, [r3, #0]
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b002      	add	sp, #8
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	20000130 	.word	0x20000130

08000948 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if (htim == &htim14){
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000954:	429a      	cmp	r2, r3
 8000956:	d107      	bne.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x20>
		F_push(getADC_data);
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800095a:	0018      	movs	r0, r3
 800095c:	f000 f828 	bl	80009b0 <F_push>
		F_push(printUART);
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000962:	0018      	movs	r0, r3
 8000964:	f000 f824 	bl	80009b0 <F_push>
	}
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000248 	.word	0x20000248
 8000974:	08000711 	.word	0x08000711
 8000978:	08000739 	.word	0x08000739

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>

08000986 <SimpleF>:
#include "nortos.h"

volatile int F_last; // number of last element of fast-speed queue
int F_first; // number of first element of fast-speed queue

void SimpleF(){;};
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <pFastQueueIni>:

void (*pFastQueue[Q_SIZE_FAST])();

inline void pFastQueueIni(void){ // initialization of Queue
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  F_last = 0;
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <pFastQueueIni+0x18>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
  F_first = 0;
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <pFastQueueIni+0x1c>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	200001fc 	.word	0x200001fc
 80009ac:	20000200 	.word	0x20000200

080009b0 <F_push>:

inline int F_push(void (*pointerQ)(void) ){ // push element from the queue
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((F_last+1)%Q_SIZE_FAST == F_first)return 1;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <F_push+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <F_push+0x68>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	d504      	bpl.n	80009ce <F_push+0x1e>
 80009c4:	3b01      	subs	r3, #1
 80009c6:	2210      	movs	r2, #16
 80009c8:	4252      	negs	r2, r2
 80009ca:	4313      	orrs	r3, r2
 80009cc:	3301      	adds	r3, #1
 80009ce:	001a      	movs	r2, r3
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <F_push+0x6c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d101      	bne.n	80009dc <F_push+0x2c>
 80009d8:	2301      	movs	r3, #1
 80009da:	e016      	b.n	8000a0a <F_push+0x5a>
  pFastQueue[F_last++] = pointerQ;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <F_push+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	1c59      	adds	r1, r3, #1
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <F_push+0x64>)
 80009e4:	6011      	str	r1, [r2, #0]
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <F_push+0x70>)
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	5099      	str	r1, [r3, r2]
  F_last%=Q_SIZE_FAST;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <F_push+0x64>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <F_push+0x68>)
 80009f4:	4013      	ands	r3, r2
 80009f6:	d504      	bpl.n	8000a02 <F_push+0x52>
 80009f8:	3b01      	subs	r3, #1
 80009fa:	2210      	movs	r2, #16
 80009fc:	4252      	negs	r2, r2
 80009fe:	4313      	orrs	r3, r2
 8000a00:	3301      	adds	r3, #1
 8000a02:	001a      	movs	r2, r3
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <F_push+0x64>)
 8000a06:	601a      	str	r2, [r3, #0]
  return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	200001fc 	.word	0x200001fc
 8000a18:	8000000f 	.word	0x8000000f
 8000a1c:	20000200 	.word	0x20000200
 8000a20:	20000204 	.word	0x20000204

08000a24 <F_pull>:

inline void (*F_pull(void))(void){ // pull element from the queue
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F_last == F_first)return SimpleF;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <F_pull+0x4c>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <F_pull+0x50>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d101      	bne.n	8000a3a <F_pull+0x16>
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <F_pull+0x54>)
 8000a38:	e016      	b.n	8000a68 <F_pull+0x44>
  pullVar = pFastQueue[F_first++];
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <F_pull+0x50>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1c59      	adds	r1, r3, #1
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <F_pull+0x50>)
 8000a42:	6011      	str	r1, [r2, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <F_pull+0x58>)
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	589b      	ldr	r3, [r3, r2]
 8000a4a:	607b      	str	r3, [r7, #4]
  F_first%=Q_SIZE_FAST;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <F_pull+0x50>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <F_pull+0x5c>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	d504      	bpl.n	8000a60 <F_pull+0x3c>
 8000a56:	3b01      	subs	r3, #1
 8000a58:	2210      	movs	r2, #16
 8000a5a:	4252      	negs	r2, r2
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	3301      	adds	r3, #1
 8000a60:	001a      	movs	r2, r3
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <F_pull+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
  return pullVar;
 8000a66:	687b      	ldr	r3, [r7, #4]
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b002      	add	sp, #8
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200001fc 	.word	0x200001fc
 8000a74:	20000200 	.word	0x20000200
 8000a78:	08000987 	.word	0x08000987
 8000a7c:	20000204 	.word	0x20000204
 8000a80:	8000000f 	.word	0x8000000f

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	699a      	ldr	r2, [r3, #24]
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	430a      	orrs	r2, r1
 8000a94:	619a      	str	r2, [r3, #24]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	69da      	ldr	r2, [r3, #28]
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	0549      	lsls	r1, r1, #21
 8000aac:	430a      	orrs	r2, r1
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_MspInit+0x44>)
 8000ab2:	69da      	ldr	r2, [r3, #28]
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	055b      	lsls	r3, r3, #21
 8000ab8:	4013      	ands	r3, r2
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 fa10 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <DMA1_Channel1_IRQHandler+0x14>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 f8a3 	bl	8001c4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	200000cc 	.word	0x200000cc

08000b14 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 f897 	bl	8001c4e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 f893 	bl	8001c4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	20000358 	.word	0x20000358
 8000b34:	20000314 	.word	0x20000314

08000b38 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <TIM14_IRQHandler+0x14>)
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 f8d4 	bl	8002cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000248 	.word	0x20000248

08000b50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <USART1_IRQHandler+0x14>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 fb7a 	bl	8003250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	20000290 	.word	0x20000290

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f003 fa90 	bl	80040bc <__errno>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	18d2      	adds	r2, r2, r3
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <_sbrk+0x64>)
 8000bb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20002000 	.word	0x20002000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	20000244 	.word	0x20000244
 8000bd0:	200003b0 	.word	0x200003b0

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_TIM14_Init+0x40>)
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <MX_TIM14_Init+0x44>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 999;
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <MX_TIM14_Init+0x40>)
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <MX_TIM14_Init+0x48>)
 8000bee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_TIM14_Init+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8000;
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_TIM14_Init+0x40>)
 8000bf8:	22fa      	movs	r2, #250	; 0xfa
 8000bfa:	0152      	lsls	r2, r2, #5
 8000bfc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_TIM14_Init+0x40>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_TIM14_Init+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <MX_TIM14_Init+0x40>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 ffd1 	bl	8002bb4 <HAL_TIM_Base_Init>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000c16:	f7ff feb1 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000248 	.word	0x20000248
 8000c24:	40002000 	.word	0x40002000
 8000c28:	000003e7 	.word	0x000003e7

08000c2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_TIM_Base_MspInit+0x48>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d115      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_TIM_Base_MspInit+0x4c>)
 8000c40:	69da      	ldr	r2, [r3, #28]
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <HAL_TIM_Base_MspInit+0x4c>)
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	0049      	lsls	r1, r1, #1
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	61da      	str	r2, [r3, #28]
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_TIM_Base_MspInit+0x4c>)
 8000c4e:	69da      	ldr	r2, [r3, #28]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2013      	movs	r0, #19
 8000c60:	f000 fe98 	bl	8001994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000c64:	2013      	movs	r0, #19
 8000c66:	f000 feaa 	bl	80019be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	40002000 	.word	0x40002000
 8000c78:	40021000 	.word	0x40021000

08000c7c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <MX_USART1_UART_Init+0x5c>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000c88:	2296      	movs	r2, #150	; 0x96
 8000c8a:	0192      	lsls	r2, r2, #6
 8000c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <MX_USART1_UART_Init+0x58>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f002 f9cf 	bl	8003064 <HAL_UART_Init>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cca:	f7ff fe57 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000290 	.word	0x20000290
 8000cd8:	40013800 	.word	0x40013800

08000cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	2414      	movs	r4, #20
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	0018      	movs	r0, r3
 8000cea:	2314      	movs	r3, #20
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f003 fa0e 	bl	8004110 <memset>
  if(uartHandle->Instance==USART1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a46      	ldr	r2, [pc, #280]	; (8000e14 <HAL_UART_MspInit+0x138>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d000      	beq.n	8000d00 <HAL_UART_MspInit+0x24>
 8000cfe:	e085      	b.n	8000e0c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d00:	4b45      	ldr	r3, [pc, #276]	; (8000e18 <HAL_UART_MspInit+0x13c>)
 8000d02:	699a      	ldr	r2, [r3, #24]
 8000d04:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <HAL_UART_MspInit+0x13c>)
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	01c9      	lsls	r1, r1, #7
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	619a      	str	r2, [r3, #24]
 8000d0e:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <HAL_UART_MspInit+0x13c>)
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	01db      	lsls	r3, r3, #7
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <HAL_UART_MspInit+0x13c>)
 8000d1e:	695a      	ldr	r2, [r3, #20]
 8000d20:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_UART_MspInit+0x13c>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	02c9      	lsls	r1, r1, #11
 8000d26:	430a      	orrs	r2, r1
 8000d28:	615a      	str	r2, [r3, #20]
 8000d2a:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_UART_MspInit+0x13c>)
 8000d2c:	695a      	ldr	r2, [r3, #20]
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	02db      	lsls	r3, r3, #11
 8000d32:	4013      	ands	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d38:	0021      	movs	r1, r4
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	22c0      	movs	r2, #192	; 0xc0
 8000d3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2202      	movs	r2, #2
 8000d44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	4a30      	ldr	r2, [pc, #192]	; (8000e1c <HAL_UART_MspInit+0x140>)
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0010      	movs	r0, r2
 8000d60:	f001 f860 	bl	8001e24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000d64:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d66:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <HAL_UART_MspInit+0x148>)
 8000d68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 fe2e 	bl	80019f8 <HAL_DMA_Init>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000da0:	f7ff fdec 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000da8:	671a      	str	r2, [r3, #112]	; 0x70
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_UART_MspInit+0x144>)
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000db2:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_UART_MspInit+0x150>)
 8000db4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000db8:	2210      	movs	r2, #16
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 fe08 	bl	80019f8 <HAL_DMA_Init>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8000dec:	f7ff fdc6 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000df4:	66da      	str	r2, [r3, #108]	; 0x6c
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_UART_MspInit+0x14c>)
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	201b      	movs	r0, #27
 8000e02:	f000 fdc7 	bl	8001994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e06:	201b      	movs	r0, #27
 8000e08:	f000 fdd9 	bl	80019be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b00b      	add	sp, #44	; 0x2c
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	40013800 	.word	0x40013800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	20000314 	.word	0x20000314
 8000e24:	40020030 	.word	0x40020030
 8000e28:	20000358 	.word	0x20000358
 8000e2c:	4002001c 	.word	0x4002001c

08000e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e5a:	f7ff febb 	bl	8000bd4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f003 f933 	bl	80040c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff fcd7 	bl	8000814 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e74:	08004a90 	.word	0x08004a90
  ldr r2, =_sbss
 8000e78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e7c:	200003b0 	.word	0x200003b0

08000e80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_IRQHandler>
	...

08000e84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_Init+0x24>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_Init+0x24>)
 8000e8e:	2110      	movs	r1, #16
 8000e90:	430a      	orrs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f809 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9a:	f7ff fdf3 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eb6:	681c      	ldr	r4, [r3, #0]
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_InitTick+0x60>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	23fa      	movs	r3, #250	; 0xfa
 8000ec0:	0098      	lsls	r0, r3, #2
 8000ec2:	f7ff f933 	bl	800012c <__udivsi3>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f7ff f92e 	bl	800012c <__udivsi3>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 fd83 	bl	80019de <HAL_SYSTICK_Config>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e00f      	b.n	8000f00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d80b      	bhi.n	8000efe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	425b      	negs	r3, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 fd50 	bl	8001994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_InitTick+0x64>)
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b003      	add	sp, #12
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x1c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x20>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	18d2      	adds	r2, r2, r3
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_IncTick+0x20>)
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	20000008 	.word	0x20000008
 8000f34:	2000039c 	.word	0x2000039c

08000f38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <HAL_GetTick+0x10>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	2000039c 	.word	0x2000039c

08000f4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f54:	230f      	movs	r3, #15
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e125      	b.n	80011b6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10a      	bne.n	8000f88 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2234      	movs	r2, #52	; 0x34
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff fa96 	bl	80004b4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d000      	beq.n	8000f94 <HAL_ADC_Init+0x48>
 8000f92:	e103      	b.n	800119c <HAL_ADC_Init+0x250>
 8000f94:	230f      	movs	r3, #15
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d000      	beq.n	8000fa0 <HAL_ADC_Init+0x54>
 8000f9e:	e0fd      	b.n	800119c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000faa:	d000      	beq.n	8000fae <HAL_ADC_Init+0x62>
 8000fac:	e0f6      	b.n	800119c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb2:	4a83      	ldr	r2, [pc, #524]	; (80011c0 <HAL_ADC_Init+0x274>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d112      	bne.n	8000ff2 <HAL_ADC_Init+0xa6>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d009      	beq.n	8000fee <HAL_ADC_Init+0xa2>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d101      	bne.n	8000ff2 <HAL_ADC_Init+0xa6>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_ADC_Init+0xa8>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d116      	bne.n	8001026 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2218      	movs	r2, #24
 8001000:	4393      	bics	r3, r2
 8001002:	0019      	movs	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	0899      	lsrs	r1, r3, #2
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4964      	ldr	r1, [pc, #400]	; (80011c4 <HAL_ADC_Init+0x278>)
 8001032:	400a      	ands	r2, r1
 8001034:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7e1b      	ldrb	r3, [r3, #24]
 800103a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7e5b      	ldrb	r3, [r3, #25]
 8001040:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001042:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7e9b      	ldrb	r3, [r3, #26]
 8001048:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800104a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	2b01      	cmp	r3, #1
 8001052:	d002      	beq.n	800105a <HAL_ADC_Init+0x10e>
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	015b      	lsls	r3, r3, #5
 8001058:	e000      	b.n	800105c <HAL_ADC_Init+0x110>
 800105a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800105c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001062:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d101      	bne.n	8001070 <HAL_ADC_Init+0x124>
 800106c:	2304      	movs	r3, #4
 800106e:	e000      	b.n	8001072 <HAL_ADC_Init+0x126>
 8001070:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001072:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2124      	movs	r1, #36	; 0x24
 8001078:	5c5b      	ldrb	r3, [r3, r1]
 800107a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800107c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	4313      	orrs	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7edb      	ldrb	r3, [r3, #27]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d115      	bne.n	80010b8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7e9b      	ldrb	r3, [r3, #26]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	0252      	lsls	r2, r2, #9
 800109a:	4313      	orrs	r3, r2
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	e00b      	b.n	80010b8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a4:	2220      	movs	r2, #32
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	2201      	movs	r2, #1
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	23c2      	movs	r3, #194	; 0xc2
 80010be:	33ff      	adds	r3, #255	; 0xff
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d007      	beq.n	80010d4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010cc:	4313      	orrs	r3, r2
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68d9      	ldr	r1, [r3, #12]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	055b      	lsls	r3, r3, #21
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d01b      	beq.n	8001128 <HAL_ADC_Init+0x1dc>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d017      	beq.n	8001128 <HAL_ADC_Init+0x1dc>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d013      	beq.n	8001128 <HAL_ADC_Init+0x1dc>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	2b03      	cmp	r3, #3
 8001106:	d00f      	beq.n	8001128 <HAL_ADC_Init+0x1dc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	2b04      	cmp	r3, #4
 800110e:	d00b      	beq.n	8001128 <HAL_ADC_Init+0x1dc>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001114:	2b05      	cmp	r3, #5
 8001116:	d007      	beq.n	8001128 <HAL_ADC_Init+0x1dc>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	2b06      	cmp	r3, #6
 800111e:	d003      	beq.n	8001128 <HAL_ADC_Init+0x1dc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001124:	2b07      	cmp	r3, #7
 8001126:	d112      	bne.n	800114e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2107      	movs	r1, #7
 8001134:	438a      	bics	r2, r1
 8001136:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6959      	ldr	r1, [r3, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	2207      	movs	r2, #7
 8001144:	401a      	ands	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <HAL_ADC_Init+0x27c>)
 8001156:	4013      	ands	r3, r2
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	429a      	cmp	r2, r3
 800115c:	d10b      	bne.n	8001176 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	2203      	movs	r2, #3
 800116a:	4393      	bics	r3, r2
 800116c:	2201      	movs	r2, #1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001174:	e01c      	b.n	80011b0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117a:	2212      	movs	r2, #18
 800117c:	4393      	bics	r3, r2
 800117e:	2210      	movs	r2, #16
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118a:	2201      	movs	r2, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001192:	230f      	movs	r3, #15
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800119a:	e009      	b.n	80011b0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a0:	2210      	movs	r2, #16
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011b0:	230f      	movs	r3, #15
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b004      	add	sp, #16
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	fffffefd 	.word	0xfffffefd
 80011c4:	fffe0219 	.word	0xfffe0219
 80011c8:	833fffe7 	.word	0x833fffe7

080011cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d8:	2317      	movs	r3, #23
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2204      	movs	r2, #4
 80011e8:	4013      	ands	r3, r2
 80011ea:	d15e      	bne.n	80012aa <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2234      	movs	r2, #52	; 0x34
 80011f0:	5c9b      	ldrb	r3, [r3, r2]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Start_DMA+0x2e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e05e      	b.n	80012b8 <HAL_ADC_Start_DMA+0xec>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2234      	movs	r2, #52	; 0x34
 80011fe:	2101      	movs	r1, #1
 8001200:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	7e5b      	ldrb	r3, [r3, #25]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d007      	beq.n	800121a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800120a:	2317      	movs	r3, #23
 800120c:	18fc      	adds	r4, r7, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	0018      	movs	r0, r3
 8001212:	f000 f963 	bl	80014dc <ADC_Enable>
 8001216:	0003      	movs	r3, r0
 8001218:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800121a:	2317      	movs	r3, #23
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d146      	bne.n	80012b2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001228:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <HAL_ADC_Start_DMA+0xf4>)
 800122a:	4013      	ands	r3, r2
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	0052      	lsls	r2, r2, #1
 8001230:	431a      	orrs	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2234      	movs	r2, #52	; 0x34
 8001240:	2100      	movs	r1, #0
 8001242:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_ADC_Start_DMA+0xf8>)
 800124a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <HAL_ADC_Start_DMA+0xfc>)
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <HAL_ADC_Start_DMA+0x100>)
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	221c      	movs	r2, #28
 8001262:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2110      	movs	r1, #16
 8001270:	430a      	orrs	r2, r1
 8001272:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2101      	movs	r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3340      	adds	r3, #64	; 0x40
 800128e:	0019      	movs	r1, r3
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f000 fbf8 	bl	8001a88 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2104      	movs	r1, #4
 80012a4:	430a      	orrs	r2, r1
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	e003      	b.n	80012b2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012aa:	2317      	movs	r3, #23
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2202      	movs	r2, #2
 80012b0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012b2:	2317      	movs	r3, #23
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	781b      	ldrb	r3, [r3, #0]
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b007      	add	sp, #28
 80012be:	bd90      	pop	{r4, r7, pc}
 80012c0:	fffff0fe 	.word	0xfffff0fe
 80012c4:	080015e5 	.word	0x080015e5
 80012c8:	08001699 	.word	0x08001699
 80012cc:	080016b7 	.word	0x080016b7

080012d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012fa:	230f      	movs	r3, #15
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	055b      	lsls	r3, r3, #21
 800130e:	429a      	cmp	r2, r3
 8001310:	d011      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d00d      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	2b02      	cmp	r3, #2
 8001320:	d009      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	2b03      	cmp	r3, #3
 8001328:	d005      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	2b04      	cmp	r3, #4
 8001330:	d001      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x46>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2234      	movs	r2, #52	; 0x34
 800133a:	5c9b      	ldrb	r3, [r3, r2]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x54>
 8001340:	2302      	movs	r3, #2
 8001342:	e0bb      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1cc>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2234      	movs	r2, #52	; 0x34
 8001348:	2101      	movs	r1, #1
 800134a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2204      	movs	r2, #4
 8001354:	4013      	ands	r3, r2
 8001356:	d000      	beq.n	800135a <HAL_ADC_ConfigChannel+0x6a>
 8001358:	e09f      	b.n	800149a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a59      	ldr	r2, [pc, #356]	; (80014c4 <HAL_ADC_ConfigChannel+0x1d4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d100      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x76>
 8001364:	e077      	b.n	8001456 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	055b      	lsls	r3, r3, #21
 8001384:	429a      	cmp	r2, r3
 8001386:	d037      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2b01      	cmp	r3, #1
 800138e:	d033      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	2b02      	cmp	r3, #2
 8001396:	d02f      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	2b03      	cmp	r3, #3
 800139e:	d02b      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d027      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d023      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d01f      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d01b      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2107      	movs	r1, #7
 80013cc:	400b      	ands	r3, r1
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d012      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2107      	movs	r1, #7
 80013de:	438a      	bics	r2, r1
 80013e0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6959      	ldr	r1, [r3, #20]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2207      	movs	r2, #7
 80013ee:	401a      	ands	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b10      	cmp	r3, #16
 80013fe:	d003      	beq.n	8001408 <HAL_ADC_ConfigChannel+0x118>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b11      	cmp	r3, #17
 8001406:	d152      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_ADC_ConfigChannel+0x1d8>)
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b10      	cmp	r3, #16
 8001412:	d102      	bne.n	800141a <HAL_ADC_ConfigChannel+0x12a>
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	e001      	b.n	800141e <HAL_ADC_ConfigChannel+0x12e>
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	03db      	lsls	r3, r3, #15
 800141e:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001420:	430b      	orrs	r3, r1
 8001422:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b10      	cmp	r3, #16
 800142a:	d140      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_ADC_ConfigChannel+0x1dc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4927      	ldr	r1, [pc, #156]	; (80014d0 <HAL_ADC_ConfigChannel+0x1e0>)
 8001432:	0018      	movs	r0, r3
 8001434:	f7fe fe7a 	bl	800012c <__udivsi3>
 8001438:	0003      	movs	r3, r0
 800143a:	001a      	movs	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	189b      	adds	r3, r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001446:	e002      	b.n	800144e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3b01      	subs	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f9      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x158>
 8001454:	e02b      	b.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	4099      	lsls	r1, r3
 8001464:	000b      	movs	r3, r1
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	400a      	ands	r2, r1
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b10      	cmp	r3, #16
 8001476:	d003      	beq.n	8001480 <HAL_ADC_ConfigChannel+0x190>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b11      	cmp	r3, #17
 800147e:	d116      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b10      	cmp	r3, #16
 800148a:	d101      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x1a0>
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_ADC_ConfigChannel+0x1e4>)
 800148e:	e000      	b.n	8001492 <HAL_ADC_ConfigChannel+0x1a2>
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001494:	400a      	ands	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e009      	b.n	80014ae <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149e:	2220      	movs	r2, #32
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80014a6:	230f      	movs	r3, #15
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2234      	movs	r2, #52	; 0x34
 80014b2:	2100      	movs	r1, #0
 80014b4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80014b6:	230f      	movs	r3, #15
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	781b      	ldrb	r3, [r3, #0]
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	00001001 	.word	0x00001001
 80014c8:	40012708 	.word	0x40012708
 80014cc:	20000000 	.word	0x20000000
 80014d0:	000f4240 	.word	0x000f4240
 80014d4:	ff7fffff 	.word	0xff7fffff
 80014d8:	ffbfffff 	.word	0xffbfffff

080014dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2203      	movs	r2, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d112      	bne.n	8001520 <ADC_Enable+0x44>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	4013      	ands	r3, r2
 8001504:	2b01      	cmp	r3, #1
 8001506:	d009      	beq.n	800151c <ADC_Enable+0x40>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	401a      	ands	r2, r3
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	429a      	cmp	r2, r3
 800151a:	d101      	bne.n	8001520 <ADC_Enable+0x44>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <ADC_Enable+0x46>
 8001520:	2300      	movs	r3, #0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d152      	bne.n	80015cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <ADC_Enable+0xfc>)
 800152e:	4013      	ands	r3, r2
 8001530:	d00d      	beq.n	800154e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	2210      	movs	r2, #16
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001542:	2201      	movs	r2, #1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e03f      	b.n	80015ce <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <ADC_Enable+0x100>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	491f      	ldr	r1, [pc, #124]	; (80015e0 <ADC_Enable+0x104>)
 8001564:	0018      	movs	r0, r3
 8001566:	f7fe fde1 	bl	800012c <__udivsi3>
 800156a:	0003      	movs	r3, r0
 800156c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800156e:	e002      	b.n	8001576 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3b01      	subs	r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f9      	bne.n	8001570 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800157c:	f7ff fcdc 	bl	8000f38 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001584:	e01b      	b.n	80015be <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001586:	f7ff fcd7 	bl	8000f38 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d914      	bls.n	80015be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d00d      	beq.n	80015be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	2210      	movs	r2, #16
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	2201      	movs	r2, #1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e007      	b.n	80015ce <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d1dc      	bne.n	8001586 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	80000017 	.word	0x80000017
 80015dc:	20000000 	.word	0x20000000
 80015e0:	000f4240 	.word	0x000f4240

080015e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	2250      	movs	r2, #80	; 0x50
 80015f8:	4013      	ands	r3, r2
 80015fa:	d140      	bne.n	800167e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	431a      	orrs	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	23c0      	movs	r3, #192	; 0xc0
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4013      	ands	r3, r2
 8001616:	d12d      	bne.n	8001674 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800161c:	2b00      	cmp	r3, #0
 800161e:	d129      	bne.n	8001674 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2208      	movs	r2, #8
 8001628:	4013      	ands	r3, r2
 800162a:	2b08      	cmp	r3, #8
 800162c:	d122      	bne.n	8001674 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2204      	movs	r2, #4
 8001636:	4013      	ands	r3, r2
 8001638:	d110      	bne.n	800165c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	210c      	movs	r1, #12
 8001646:	438a      	bics	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <ADC_DMAConvCplt+0xb0>)
 8001650:	4013      	ands	r3, r2
 8001652:	2201      	movs	r2, #1
 8001654:	431a      	orrs	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
 800165a:	e00b      	b.n	8001674 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001660:	2220      	movs	r2, #32
 8001662:	431a      	orrs	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166c:	2201      	movs	r2, #1
 800166e:	431a      	orrs	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff f956 	bl	8000928 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800167c:	e005      	b.n	800168a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	0010      	movs	r0, r2
 8001688:	4798      	blx	r3
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	fffffefe 	.word	0xfffffefe

08001698 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff fe11 	bl	80012d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b004      	add	sp, #16
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d4:	2204      	movs	r2, #4
 80016d6:	431a      	orrs	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff fdfe 	bl	80012e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b004      	add	sp, #16
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f4:	2317      	movs	r3, #23
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2234      	movs	r2, #52	; 0x34
 8001708:	5c9b      	ldrb	r3, [r3, r2]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_ADCEx_Calibration_Start+0x26>
 800170e:	2302      	movs	r3, #2
 8001710:	e08d      	b.n	800182e <HAL_ADCEx_Calibration_Start+0x142>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2234      	movs	r2, #52	; 0x34
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2203      	movs	r2, #3
 8001722:	4013      	ands	r3, r2
 8001724:	2b01      	cmp	r3, #1
 8001726:	d112      	bne.n	800174e <HAL_ADCEx_Calibration_Start+0x62>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2201      	movs	r2, #1
 8001730:	4013      	ands	r3, r2
 8001732:	2b01      	cmp	r3, #1
 8001734:	d009      	beq.n	800174a <HAL_ADCEx_Calibration_Start+0x5e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	401a      	ands	r2, r3
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	429a      	cmp	r2, r3
 8001748:	d101      	bne.n	800174e <HAL_ADCEx_Calibration_Start+0x62>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_ADCEx_Calibration_Start+0x64>
 800174e:	2300      	movs	r3, #0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d15b      	bne.n	800180c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	4a37      	ldr	r2, [pc, #220]	; (8001838 <HAL_ADCEx_Calibration_Start+0x14c>)
 800175a:	4013      	ands	r3, r2
 800175c:	2202      	movs	r2, #2
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2203      	movs	r2, #3
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2103      	movs	r1, #3
 800177c:	438a      	bics	r2, r1
 800177e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	0609      	lsls	r1, r1, #24
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001792:	f7ff fbd1 	bl	8000f38 <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800179a:	e01d      	b.n	80017d8 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800179c:	f7ff fbcc 	bl	8000f38 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d916      	bls.n	80017d8 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	0fdb      	lsrs	r3, r3, #31
 80017b2:	07da      	lsls	r2, r3, #31
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	061b      	lsls	r3, r3, #24
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d10d      	bne.n	80017d8 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	2212      	movs	r2, #18
 80017c2:	4393      	bics	r3, r2
 80017c4:	2210      	movs	r2, #16
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2234      	movs	r2, #52	; 0x34
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e02a      	b.n	800182e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	0fdb      	lsrs	r3, r3, #31
 80017e0:	07da      	lsls	r2, r3, #31
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	061b      	lsls	r3, r3, #24
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d0d8      	beq.n	800179c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68d9      	ldr	r1, [r3, #12]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	2203      	movs	r2, #3
 8001800:	4393      	bics	r3, r2
 8001802:	2201      	movs	r2, #1
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
 800180a:	e009      	b.n	8001820 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001810:	2220      	movs	r2, #32
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001818:	2317      	movs	r3, #23
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2234      	movs	r2, #52	; 0x34
 8001824:	2100      	movs	r1, #0
 8001826:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001828:	2317      	movs	r3, #23
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	781b      	ldrb	r3, [r3, #0]
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b006      	add	sp, #24
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	fffffefd 	.word	0xfffffefd

0800183c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	0002      	movs	r2, r0
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b7f      	cmp	r3, #127	; 0x7f
 800184e:	d809      	bhi.n	8001864 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	001a      	movs	r2, r3
 8001856:	231f      	movs	r3, #31
 8001858:	401a      	ands	r2, r3
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_EnableIRQ+0x30>)
 800185c:	2101      	movs	r1, #1
 800185e:	4091      	lsls	r1, r2
 8001860:	000a      	movs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
  }
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	0002      	movs	r2, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800187e:	1dfb      	adds	r3, r7, #7
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	d828      	bhi.n	80018d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001886:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <__NVIC_SetPriority+0xd4>)
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b25b      	sxtb	r3, r3
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	33c0      	adds	r3, #192	; 0xc0
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	589b      	ldr	r3, [r3, r2]
 8001896:	1dfa      	adds	r2, r7, #7
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	0011      	movs	r1, r2
 800189c:	2203      	movs	r2, #3
 800189e:	400a      	ands	r2, r1
 80018a0:	00d2      	lsls	r2, r2, #3
 80018a2:	21ff      	movs	r1, #255	; 0xff
 80018a4:	4091      	lsls	r1, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	43d2      	mvns	r2, r2
 80018aa:	401a      	ands	r2, r3
 80018ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	019b      	lsls	r3, r3, #6
 80018b2:	22ff      	movs	r2, #255	; 0xff
 80018b4:	401a      	ands	r2, r3
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	0018      	movs	r0, r3
 80018bc:	2303      	movs	r3, #3
 80018be:	4003      	ands	r3, r0
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c4:	481f      	ldr	r0, [pc, #124]	; (8001944 <__NVIC_SetPriority+0xd4>)
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	430a      	orrs	r2, r1
 80018d0:	33c0      	adds	r3, #192	; 0xc0
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018d6:	e031      	b.n	800193c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <__NVIC_SetPriority+0xd8>)
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	0019      	movs	r1, r3
 80018e0:	230f      	movs	r3, #15
 80018e2:	400b      	ands	r3, r1
 80018e4:	3b08      	subs	r3, #8
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3306      	adds	r3, #6
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	18d3      	adds	r3, r2, r3
 80018ee:	3304      	adds	r3, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1dfa      	adds	r2, r7, #7
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	0011      	movs	r1, r2
 80018f8:	2203      	movs	r2, #3
 80018fa:	400a      	ands	r2, r1
 80018fc:	00d2      	lsls	r2, r2, #3
 80018fe:	21ff      	movs	r1, #255	; 0xff
 8001900:	4091      	lsls	r1, r2
 8001902:	000a      	movs	r2, r1
 8001904:	43d2      	mvns	r2, r2
 8001906:	401a      	ands	r2, r3
 8001908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	401a      	ands	r2, r3
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	2303      	movs	r3, #3
 800191a:	4003      	ands	r3, r0
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <__NVIC_SetPriority+0xd8>)
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	001c      	movs	r4, r3
 8001928:	230f      	movs	r3, #15
 800192a:	4023      	ands	r3, r4
 800192c:	3b08      	subs	r3, #8
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	430a      	orrs	r2, r1
 8001932:	3306      	adds	r3, #6
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	18c3      	adds	r3, r0, r3
 8001938:	3304      	adds	r3, #4
 800193a:	601a      	str	r2, [r3, #0]
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b003      	add	sp, #12
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	1e5a      	subs	r2, r3, #1
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	045b      	lsls	r3, r3, #17
 800195c:	429a      	cmp	r2, r3
 800195e:	d301      	bcc.n	8001964 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001960:	2301      	movs	r3, #1
 8001962:	e010      	b.n	8001986 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <SysTick_Config+0x44>)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	3a01      	subs	r2, #1
 800196a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196c:	2301      	movs	r3, #1
 800196e:	425b      	negs	r3, r3
 8001970:	2103      	movs	r1, #3
 8001972:	0018      	movs	r0, r3
 8001974:	f7ff ff7c 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SysTick_Config+0x44>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SysTick_Config+0x44>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	210f      	movs	r1, #15
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	1c02      	adds	r2, r0, #0
 80019a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	0011      	movs	r1, r2
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b004      	add	sp, #16
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	0002      	movs	r2, r0
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff ff33 	bl	800183c <__NVIC_EnableIRQ>
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ffaf 	bl	800194c <SysTick_Config>
 80019ee:	0003      	movs	r3, r0
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e036      	b.n	8001a7c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2221      	movs	r2, #33	; 0x21
 8001a12:	2102      	movs	r1, #2
 8001a14:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_DMA_Init+0x8c>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 f9c4 	bl	8001dec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2221      	movs	r2, #33	; 0x21
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2220      	movs	r2, #32
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}  
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b004      	add	sp, #16
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	ffffc00f 	.word	0xffffc00f

08001a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001a96:	2317      	movs	r3, #23
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_DMA_Start_IT+0x24>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e04f      	b.n	8001b4c <HAL_DMA_Start_IT+0xc4>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2221      	movs	r2, #33	; 0x21
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d13a      	bne.n	8001b36 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2221      	movs	r2, #33	; 0x21
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	438a      	bics	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f954 	bl	8001d92 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	210e      	movs	r1, #14
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e00f      	b.n	8001b24 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	210a      	movs	r1, #10
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2104      	movs	r1, #4
 8001b20:	438a      	bics	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e007      	b.n	8001b46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b3e:	2317      	movs	r3, #23
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2202      	movs	r2, #2
 8001b44:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001b46:	2317      	movs	r3, #23
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
} 
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b006      	add	sp, #24
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2221      	movs	r2, #33	; 0x21
 8001b60:	5c9b      	ldrb	r3, [r3, r2]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e020      	b.n	8001bbc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	210e      	movs	r1, #14
 8001b86:	438a      	bics	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	438a      	bics	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4091      	lsls	r1, r2
 8001ba6:	000a      	movs	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2221      	movs	r2, #33	; 0x21
 8001bae:	2101      	movs	r1, #1
 8001bb0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bcc:	210f      	movs	r1, #15
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2221      	movs	r2, #33	; 0x21
 8001bd8:	5c9b      	ldrb	r3, [r3, r2]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d006      	beq.n	8001bee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2204      	movs	r2, #4
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e028      	b.n	8001c40 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	210e      	movs	r1, #14
 8001bfa:	438a      	bics	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	438a      	bics	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	2101      	movs	r1, #1
 8001c18:	4091      	lsls	r1, r2
 8001c1a:	000a      	movs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2221      	movs	r2, #33	; 0x21
 8001c22:	2101      	movs	r1, #1
 8001c24:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	0010      	movs	r0, r2
 8001c3e:	4798      	blx	r3
    } 
  }
  return status;
 8001c40:	230f      	movs	r3, #15
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	781b      	ldrb	r3, [r3, #0]
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	0013      	movs	r3, r2
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	d024      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x72>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2204      	movs	r2, #4
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d020      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2220      	movs	r2, #32
 8001c86:	4013      	ands	r3, r2
 8001c88:	d107      	bne.n	8001c9a <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2104      	movs	r1, #4
 8001c96:	438a      	bics	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d100      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x66>
 8001cb2:	e06a      	b.n	8001d8a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	0010      	movs	r0, r2
 8001cbc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001cbe:	e064      	b.n	8001d8a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d02b      	beq.n	8001d28 <HAL_DMA_IRQHandler+0xda>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d027      	beq.n	8001d28 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d10b      	bne.n	8001cfc <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	210a      	movs	r1, #10
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2221      	movs	r2, #33	; 0x21
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d04:	2102      	movs	r1, #2
 8001d06:	4091      	lsls	r1, r2
 8001d08:	000a      	movs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	2100      	movs	r1, #0
 8001d12:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d036      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	0010      	movs	r0, r2
 8001d24:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d26:	e030      	b.n	8001d8a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	0013      	movs	r3, r2
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	d028      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x13c>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d024      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	210e      	movs	r1, #14
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4091      	lsls	r1, r2
 8001d5c:	000a      	movs	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2221      	movs	r2, #33	; 0x21
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	0010      	movs	r0, r2
 8001d86:	4798      	blx	r3
    }
   }
}  
 8001d88:	e7ff      	b.n	8001d8a <HAL_DMA_IRQHandler+0x13c>
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b004      	add	sp, #16
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	2101      	movs	r1, #1
 8001daa:	4091      	lsls	r1, r2
 8001dac:	000a      	movs	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d108      	bne.n	8001dd2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dd0:	e007      	b.n	8001de2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	60da      	str	r2, [r3, #12]
}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b004      	add	sp, #16
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <DMA_CalcBaseAndBitshift+0x30>)
 8001dfa:	4694      	mov	ip, r2
 8001dfc:	4463      	add	r3, ip
 8001dfe:	2114      	movs	r1, #20
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7fe f993 	bl	800012c <__udivsi3>
 8001e06:	0003      	movs	r3, r0
 8001e08:	009a      	lsls	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <DMA_CalcBaseAndBitshift+0x34>)
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	bffdfff8 	.word	0xbffdfff8
 8001e20:	40020000 	.word	0x40020000

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e14f      	b.n	80020d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4091      	lsls	r1, r2
 8001e3e:	000a      	movs	r2, r1
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d100      	bne.n	8001e4c <HAL_GPIO_Init+0x28>
 8001e4a:	e140      	b.n	80020ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	409a      	lsls	r2, r3
 8001e72:	0013      	movs	r3, r2
 8001e74:	43da      	mvns	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d017      	beq.n	8001f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2203      	movs	r2, #3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d123      	bne.n	8001f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	58d3      	ldr	r3, [r2, r3]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2207      	movs	r2, #7
 8001f20:	4013      	ands	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2107      	movs	r1, #7
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	6939      	ldr	r1, [r7, #16]
 8001f54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	401a      	ands	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
 8001f90:	029b      	lsls	r3, r3, #10
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_GPIO_Init+0x174>
 8001f96:	e09a      	b.n	80020ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f98:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_GPIO_Init+0x2c8>)
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_GPIO_Init+0x2c8>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	4b51      	ldr	r3, [pc, #324]	; (80020ec <HAL_GPIO_Init+0x2c8>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fb0:	4a4f      	ldr	r2, [pc, #316]	; (80020f0 <HAL_GPIO_Init+0x2cc>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	589b      	ldr	r3, [r3, r2]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	0013      	movs	r3, r2
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	2390      	movs	r3, #144	; 0x90
 8001fd8:	05db      	lsls	r3, r3, #23
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x1e2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a44      	ldr	r2, [pc, #272]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x1de>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a43      	ldr	r2, [pc, #268]	; (80020f8 <HAL_GPIO_Init+0x2d4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x1da>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a42      	ldr	r2, [pc, #264]	; (80020fc <HAL_GPIO_Init+0x2d8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x1d6>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x1e4>
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x1e4>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x1e4>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x1e4>
 8002006:	2300      	movs	r3, #0
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	2103      	movs	r1, #3
 800200c:	400a      	ands	r2, r1
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x2cc>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002026:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	025b      	lsls	r3, r3, #9
 800203e:	4013      	ands	r3, r2
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43da      	mvns	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	4013      	ands	r3, r2
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43da      	mvns	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	035b      	lsls	r3, r3, #13
 8002092:	4013      	ands	r3, r2
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	039b      	lsls	r3, r3, #14
 80020bc:	4013      	ands	r3, r2
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_GPIO_Init+0x2dc>)
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	40da      	lsrs	r2, r3
 80020dc:	1e13      	subs	r3, r2, #0
 80020de:	d000      	beq.n	80020e2 <HAL_GPIO_Init+0x2be>
 80020e0:	e6a8      	b.n	8001e34 <HAL_GPIO_Init+0x10>
  } 
}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b006      	add	sp, #24
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000
 80020f4:	48000400 	.word	0x48000400
 80020f8:	48000800 	.word	0x48000800
 80020fc:	48000c00 	.word	0x48000c00
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	0008      	movs	r0, r1
 800210e:	0011      	movs	r1, r2
 8002110:	1cbb      	adds	r3, r7, #2
 8002112:	1c02      	adds	r2, r0, #0
 8002114:	801a      	strh	r2, [r3, #0]
 8002116:	1c7b      	adds	r3, r7, #1
 8002118:	1c0a      	adds	r2, r1, #0
 800211a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800211c:	1c7b      	adds	r3, r7, #1
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002124:	1cbb      	adds	r3, r7, #2
 8002126:	881a      	ldrh	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800212c:	e003      	b.n	8002136 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212e:	1cbb      	adds	r3, r7, #2
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e301      	b.n	8002756 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2201      	movs	r2, #1
 8002158:	4013      	ands	r3, r2
 800215a:	d100      	bne.n	800215e <HAL_RCC_OscConfig+0x1e>
 800215c:	e08d      	b.n	800227a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800215e:	4bc3      	ldr	r3, [pc, #780]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	220c      	movs	r2, #12
 8002164:	4013      	ands	r3, r2
 8002166:	2b04      	cmp	r3, #4
 8002168:	d00e      	beq.n	8002188 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800216a:	4bc0      	ldr	r3, [pc, #768]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	220c      	movs	r2, #12
 8002170:	4013      	ands	r3, r2
 8002172:	2b08      	cmp	r3, #8
 8002174:	d116      	bne.n	80021a4 <HAL_RCC_OscConfig+0x64>
 8002176:	4bbd      	ldr	r3, [pc, #756]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	025b      	lsls	r3, r3, #9
 800217e:	401a      	ands	r2, r3
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	025b      	lsls	r3, r3, #9
 8002184:	429a      	cmp	r2, r3
 8002186:	d10d      	bne.n	80021a4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	4bb8      	ldr	r3, [pc, #736]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	4013      	ands	r3, r2
 8002192:	d100      	bne.n	8002196 <HAL_RCC_OscConfig+0x56>
 8002194:	e070      	b.n	8002278 <HAL_RCC_OscConfig+0x138>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d000      	beq.n	80021a0 <HAL_RCC_OscConfig+0x60>
 800219e:	e06b      	b.n	8002278 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e2d8      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_OscConfig+0x7c>
 80021ac:	4baf      	ldr	r3, [pc, #700]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4bae      	ldr	r3, [pc, #696]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	0249      	lsls	r1, r1, #9
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e02f      	b.n	800221c <HAL_RCC_OscConfig+0xdc>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10c      	bne.n	80021de <HAL_RCC_OscConfig+0x9e>
 80021c4:	4ba9      	ldr	r3, [pc, #676]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4ba8      	ldr	r3, [pc, #672]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021ca:	49a9      	ldr	r1, [pc, #676]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	4ba6      	ldr	r3, [pc, #664]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4ba5      	ldr	r3, [pc, #660]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021d6:	49a7      	ldr	r1, [pc, #668]	; (8002474 <HAL_RCC_OscConfig+0x334>)
 80021d8:	400a      	ands	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e01e      	b.n	800221c <HAL_RCC_OscConfig+0xdc>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d10e      	bne.n	8002204 <HAL_RCC_OscConfig+0xc4>
 80021e6:	4ba1      	ldr	r3, [pc, #644]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4ba0      	ldr	r3, [pc, #640]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	02c9      	lsls	r1, r1, #11
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	4b9d      	ldr	r3, [pc, #628]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b9c      	ldr	r3, [pc, #624]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0249      	lsls	r1, r1, #9
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0xdc>
 8002204:	4b99      	ldr	r3, [pc, #612]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b98      	ldr	r3, [pc, #608]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 800220a:	4999      	ldr	r1, [pc, #612]	; (8002470 <HAL_RCC_OscConfig+0x330>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	4b96      	ldr	r3, [pc, #600]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b95      	ldr	r3, [pc, #596]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002216:	4997      	ldr	r1, [pc, #604]	; (8002474 <HAL_RCC_OscConfig+0x334>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d014      	beq.n	800224e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe fe88 	bl	8000f38 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222e:	f7fe fe83 	bl	8000f38 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e28a      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002240:	4b8a      	ldr	r3, [pc, #552]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0xee>
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fe73 	bl	8000f38 <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe fe6e 	bl	8000f38 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e275      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	4b80      	ldr	r3, [pc, #512]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	4013      	ands	r3, r2
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x118>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2202      	movs	r2, #2
 8002280:	4013      	ands	r3, r2
 8002282:	d100      	bne.n	8002286 <HAL_RCC_OscConfig+0x146>
 8002284:	e069      	b.n	800235a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002286:	4b79      	ldr	r3, [pc, #484]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	220c      	movs	r2, #12
 800228c:	4013      	ands	r3, r2
 800228e:	d00b      	beq.n	80022a8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002290:	4b76      	ldr	r3, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	220c      	movs	r2, #12
 8002296:	4013      	ands	r3, r2
 8002298:	2b08      	cmp	r3, #8
 800229a:	d11c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x196>
 800229c:	4b73      	ldr	r3, [pc, #460]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	025b      	lsls	r3, r3, #9
 80022a4:	4013      	ands	r3, r2
 80022a6:	d116      	bne.n	80022d6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a8:	4b70      	ldr	r3, [pc, #448]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x17e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e24b      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b6b      	ldr	r3, [pc, #428]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	22f8      	movs	r2, #248	; 0xf8
 80022c4:	4393      	bics	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	00da      	lsls	r2, r3, #3
 80022ce:	4b67      	ldr	r3, [pc, #412]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d4:	e041      	b.n	800235a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d024      	beq.n	8002328 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b62      	ldr	r3, [pc, #392]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	430a      	orrs	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe fe25 	bl	8000f38 <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7fe fe20 	bl	8000f38 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e227      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2202      	movs	r2, #2
 800230c:	4013      	ands	r3, r2
 800230e:	d0f1      	beq.n	80022f4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	22f8      	movs	r2, #248	; 0xf8
 8002316:	4393      	bics	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00da      	lsls	r2, r3, #3
 8002320:	4b52      	ldr	r3, [pc, #328]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002322:	430a      	orrs	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e018      	b.n	800235a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 800232e:	2101      	movs	r1, #1
 8002330:	438a      	bics	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fe00 	bl	8000f38 <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fdfb 	bl	8000f38 <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e202      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002350:	4b46      	ldr	r3, [pc, #280]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d1f1      	bne.n	800233e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2208      	movs	r2, #8
 8002360:	4013      	ands	r3, r2
 8002362:	d036      	beq.n	80023d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d019      	beq.n	80023a0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236c:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 800236e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002370:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002372:	2101      	movs	r1, #1
 8002374:	430a      	orrs	r2, r1
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe fdde 	bl	8000f38 <HAL_GetTick>
 800237c:	0003      	movs	r3, r0
 800237e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002382:	f7fe fdd9 	bl	8000f38 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1e0      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2202      	movs	r2, #2
 800239a:	4013      	ands	r3, r2
 800239c:	d0f1      	beq.n	8002382 <HAL_RCC_OscConfig+0x242>
 800239e:	e018      	b.n	80023d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80023a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a4:	4b31      	ldr	r3, [pc, #196]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	438a      	bics	r2, r1
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7fe fdc4 	bl	8000f38 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b6:	f7fe fdbf 	bl	8000f38 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1c6      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f1      	bne.n	80023b6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	d100      	bne.n	80023de <HAL_RCC_OscConfig+0x29e>
 80023dc:	e0b4      	b.n	8002548 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	201f      	movs	r0, #31
 80023e0:	183b      	adds	r3, r7, r0
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	055b      	lsls	r3, r3, #21
 80023ee:	4013      	ands	r3, r2
 80023f0:	d110      	bne.n	8002414 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	0549      	lsls	r1, r1, #21
 80023fc:	430a      	orrs	r2, r1
 80023fe:	61da      	str	r2, [r3, #28]
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	055b      	lsls	r3, r3, #21
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800240e:	183b      	adds	r3, r7, r0
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_RCC_OscConfig+0x338>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4013      	ands	r3, r2
 800241e:	d11a      	bne.n	8002456 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_RCC_OscConfig+0x338>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_RCC_OscConfig+0x338>)
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	0049      	lsls	r1, r1, #1
 800242a:	430a      	orrs	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7fe fd83 	bl	8000f38 <HAL_GetTick>
 8002432:	0003      	movs	r3, r0
 8002434:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002438:	f7fe fd7e 	bl	8000f38 <HAL_GetTick>
 800243c:	0002      	movs	r2, r0
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e185      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x338>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4013      	ands	r3, r2
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10e      	bne.n	800247c <HAL_RCC_OscConfig+0x33c>
 800245e:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	4b02      	ldr	r3, [pc, #8]	; (800246c <HAL_RCC_OscConfig+0x32c>)
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	621a      	str	r2, [r3, #32]
 800246a:	e035      	b.n	80024d8 <HAL_RCC_OscConfig+0x398>
 800246c:	40021000 	.word	0x40021000
 8002470:	fffeffff 	.word	0xfffeffff
 8002474:	fffbffff 	.word	0xfffbffff
 8002478:	40007000 	.word	0x40007000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x35e>
 8002484:	4bb6      	ldr	r3, [pc, #728]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	4bb5      	ldr	r3, [pc, #724]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800248a:	2101      	movs	r1, #1
 800248c:	438a      	bics	r2, r1
 800248e:	621a      	str	r2, [r3, #32]
 8002490:	4bb3      	ldr	r3, [pc, #716]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002492:	6a1a      	ldr	r2, [r3, #32]
 8002494:	4bb2      	ldr	r3, [pc, #712]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002496:	2104      	movs	r1, #4
 8002498:	438a      	bics	r2, r1
 800249a:	621a      	str	r2, [r3, #32]
 800249c:	e01c      	b.n	80024d8 <HAL_RCC_OscConfig+0x398>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x380>
 80024a6:	4bae      	ldr	r3, [pc, #696]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80024a8:	6a1a      	ldr	r2, [r3, #32]
 80024aa:	4bad      	ldr	r3, [pc, #692]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80024ac:	2104      	movs	r1, #4
 80024ae:	430a      	orrs	r2, r1
 80024b0:	621a      	str	r2, [r3, #32]
 80024b2:	4bab      	ldr	r3, [pc, #684]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80024b4:	6a1a      	ldr	r2, [r3, #32]
 80024b6:	4baa      	ldr	r3, [pc, #680]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	621a      	str	r2, [r3, #32]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x398>
 80024c0:	4ba7      	ldr	r3, [pc, #668]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	4ba6      	ldr	r3, [pc, #664]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	621a      	str	r2, [r3, #32]
 80024cc:	4ba4      	ldr	r3, [pc, #656]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	4ba3      	ldr	r3, [pc, #652]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80024d2:	2104      	movs	r1, #4
 80024d4:	438a      	bics	r2, r1
 80024d6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d014      	beq.n	800250a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7fe fd2a 	bl	8000f38 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	e009      	b.n	80024fe <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fd25 	bl	8000f38 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4a9b      	ldr	r2, [pc, #620]	; (8002764 <HAL_RCC_OscConfig+0x624>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e12b      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	4b98      	ldr	r3, [pc, #608]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x3aa>
 8002508:	e013      	b.n	8002532 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe fd15 	bl	8000f38 <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002512:	e009      	b.n	8002528 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fd10 	bl	8000f38 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	4a91      	ldr	r2, [pc, #580]	; (8002764 <HAL_RCC_OscConfig+0x624>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e116      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	4b8d      	ldr	r3, [pc, #564]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	2202      	movs	r2, #2
 800252e:	4013      	ands	r3, r2
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	4b87      	ldr	r3, [pc, #540]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002542:	4989      	ldr	r1, [pc, #548]	; (8002768 <HAL_RCC_OscConfig+0x628>)
 8002544:	400a      	ands	r2, r1
 8002546:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	4013      	ands	r3, r2
 8002550:	d063      	beq.n	800261a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d12a      	bne.n	80025b0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255e:	4b80      	ldr	r3, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002560:	2104      	movs	r1, #4
 8002562:	430a      	orrs	r2, r1
 8002564:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002566:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256a:	4b7d      	ldr	r3, [pc, #500]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800256c:	2101      	movs	r1, #1
 800256e:	430a      	orrs	r2, r1
 8002570:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7fe fce1 	bl	8000f38 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800257c:	f7fe fcdc 	bl	8000f38 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e0e3      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800258e:	4b74      	ldr	r3, [pc, #464]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	2202      	movs	r2, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d0f1      	beq.n	800257c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002598:	4b71      	ldr	r3, [pc, #452]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800259a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259c:	22f8      	movs	r2, #248	; 0xf8
 800259e:	4393      	bics	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	00da      	lsls	r2, r3, #3
 80025a8:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025aa:	430a      	orrs	r2, r1
 80025ac:	635a      	str	r2, [r3, #52]	; 0x34
 80025ae:	e034      	b.n	800261a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	3305      	adds	r3, #5
 80025b6:	d111      	bne.n	80025dc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025b8:	4b69      	ldr	r3, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025be:	2104      	movs	r1, #4
 80025c0:	438a      	bics	r2, r1
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025c4:	4b66      	ldr	r3, [pc, #408]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	22f8      	movs	r2, #248	; 0xf8
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	00da      	lsls	r2, r3, #3
 80025d4:	4b62      	ldr	r3, [pc, #392]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34
 80025da:	e01e      	b.n	800261a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025dc:	4b60      	ldr	r3, [pc, #384]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e0:	4b5f      	ldr	r3, [pc, #380]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025e2:	2104      	movs	r1, #4
 80025e4:	430a      	orrs	r2, r1
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025e8:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ec:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80025ee:	2101      	movs	r1, #1
 80025f0:	438a      	bics	r2, r1
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f4:	f7fe fca0 	bl	8000f38 <HAL_GetTick>
 80025f8:	0003      	movs	r3, r0
 80025fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025fe:	f7fe fc9b 	bl	8000f38 <HAL_GetTick>
 8002602:	0002      	movs	r2, r0
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0a2      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	2202      	movs	r2, #2
 8002616:	4013      	ands	r3, r2
 8002618:	d1f1      	bne.n	80025fe <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d100      	bne.n	8002624 <HAL_RCC_OscConfig+0x4e4>
 8002622:	e097      	b.n	8002754 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002624:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	220c      	movs	r2, #12
 800262a:	4013      	ands	r3, r2
 800262c:	2b08      	cmp	r3, #8
 800262e:	d100      	bne.n	8002632 <HAL_RCC_OscConfig+0x4f2>
 8002630:	e06b      	b.n	800270a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d14c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b49      	ldr	r3, [pc, #292]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b48      	ldr	r3, [pc, #288]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002640:	494a      	ldr	r1, [pc, #296]	; (800276c <HAL_RCC_OscConfig+0x62c>)
 8002642:	400a      	ands	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fc77 	bl	8000f38 <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe fc72 	bl	8000f38 <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e079      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	049b      	lsls	r3, r3, #18
 800266a:	4013      	ands	r3, r2
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	220f      	movs	r2, #15
 8002674:	4393      	bics	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267c:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800267e:	430a      	orrs	r2, r1
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4a3a      	ldr	r2, [pc, #232]	; (8002770 <HAL_RCC_OscConfig+0x630>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	431a      	orrs	r2, r3
 8002696:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002698:	430a      	orrs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	0449      	lsls	r1, r1, #17
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fc45 	bl	8000f38 <HAL_GetTick>
 80026ae:	0003      	movs	r3, r0
 80026b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fc40 	bl	8000f38 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e047      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	049b      	lsls	r3, r3, #18
 80026ce:	4013      	ands	r3, r2
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x574>
 80026d2:	e03f      	b.n	8002754 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80026da:	4924      	ldr	r1, [pc, #144]	; (800276c <HAL_RCC_OscConfig+0x62c>)
 80026dc:	400a      	ands	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fc2a 	bl	8000f38 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fc25 	bl	8000f38 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e02c      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	049b      	lsls	r3, r3, #18
 8002704:	4013      	ands	r3, r2
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x5aa>
 8002708:	e024      	b.n	8002754 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e01f      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCC_OscConfig+0x620>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	025b      	lsls	r3, r3, #9
 8002728:	401a      	ands	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	429a      	cmp	r2, r3
 8002730:	d10e      	bne.n	8002750 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	220f      	movs	r2, #15
 8002736:	401a      	ands	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	23f0      	movs	r3, #240	; 0xf0
 8002744:	039b      	lsls	r3, r3, #14
 8002746:	401a      	ands	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	b008      	add	sp, #32
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	40021000 	.word	0x40021000
 8002764:	00001388 	.word	0x00001388
 8002768:	efffffff 	.word	0xefffffff
 800276c:	feffffff 	.word	0xfeffffff
 8002770:	ffc2ffff 	.word	0xffc2ffff

08002774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0b3      	b.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002788:	4b5b      	ldr	r3, [pc, #364]	; (80028f8 <HAL_RCC_ClockConfig+0x184>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d911      	bls.n	80027ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b58      	ldr	r3, [pc, #352]	; (80028f8 <HAL_RCC_ClockConfig+0x184>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	4393      	bics	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <HAL_RCC_ClockConfig+0x184>)
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a8:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_ClockConfig+0x184>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e09a      	b.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2202      	movs	r2, #2
 80027c0:	4013      	ands	r3, r2
 80027c2:	d015      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2204      	movs	r2, #4
 80027ca:	4013      	ands	r3, r2
 80027cc:	d006      	beq.n	80027dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027ce:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4b4a      	ldr	r3, [pc, #296]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 80027d4:	21e0      	movs	r1, #224	; 0xe0
 80027d6:	00c9      	lsls	r1, r1, #3
 80027d8:	430a      	orrs	r2, r1
 80027da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	22f0      	movs	r2, #240	; 0xf0
 80027e2:	4393      	bics	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	4b44      	ldr	r3, [pc, #272]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	d040      	beq.n	800287c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	029b      	lsls	r3, r3, #10
 800280a:	4013      	ands	r3, r2
 800280c:	d114      	bne.n	8002838 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06e      	b.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	049b      	lsls	r3, r3, #18
 8002822:	4013      	ands	r3, r2
 8002824:	d108      	bne.n	8002838 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e062      	b.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	4b34      	ldr	r3, [pc, #208]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2202      	movs	r2, #2
 8002830:	4013      	ands	r3, r2
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e05b      	b.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002838:	4b30      	ldr	r3, [pc, #192]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2203      	movs	r2, #3
 800283e:	4393      	bics	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800284c:	f7fe fb74 	bl	8000f38 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002854:	e009      	b.n	800286a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002856:	f7fe fb6f 	bl	8000f38 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_RCC_ClockConfig+0x18c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e042      	b.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	220c      	movs	r2, #12
 8002870:	401a      	ands	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	429a      	cmp	r2, r3
 800287a:	d1ec      	bne.n	8002856 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_RCC_ClockConfig+0x184>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	4013      	ands	r3, r2
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d211      	bcs.n	80028ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_ClockConfig+0x184>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2201      	movs	r2, #1
 8002890:	4393      	bics	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_RCC_ClockConfig+0x184>)
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_RCC_ClockConfig+0x184>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e020      	b.n	80028f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2204      	movs	r2, #4
 80028b4:	4013      	ands	r3, r2
 80028b6:	d009      	beq.n	80028cc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a11      	ldr	r2, [pc, #68]	; (8002904 <HAL_RCC_ClockConfig+0x190>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028cc:	f000 f820 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80028d0:	0001      	movs	r1, r0
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_RCC_ClockConfig+0x188>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	220f      	movs	r2, #15
 80028da:	4013      	ands	r3, r2
 80028dc:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_RCC_ClockConfig+0x194>)
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	000a      	movs	r2, r1
 80028e2:	40da      	lsrs	r2, r3
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x198>)
 80028e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f7fe fadf 	bl	8000eac <HAL_InitTick>
  
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b004      	add	sp, #16
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021000 	.word	0x40021000
 8002900:	00001388 	.word	0x00001388
 8002904:	fffff8ff 	.word	0xfffff8ff
 8002908:	08004a3c 	.word	0x08004a3c
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b08f      	sub	sp, #60	; 0x3c
 8002914:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002916:	2314      	movs	r3, #20
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800291c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800291e:	c313      	stmia	r3!, {r0, r1, r4}
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4a29      	ldr	r2, [pc, #164]	; (80029cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002928:	ca13      	ldmia	r2!, {r0, r1, r4}
 800292a:	c313      	stmia	r3!, {r0, r1, r4}
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002934:	2300      	movs	r3, #0
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
 8002938:	2300      	movs	r3, #0
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002944:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	220c      	movs	r2, #12
 800294e:	4013      	ands	r3, r2
 8002950:	2b04      	cmp	r3, #4
 8002952:	d002      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x4a>
 8002954:	2b08      	cmp	r3, #8
 8002956:	d003      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x50>
 8002958:	e02d      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800295e:	e02d      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	0c9b      	lsrs	r3, r3, #18
 8002964:	220f      	movs	r2, #15
 8002966:	4013      	ands	r3, r2
 8002968:	2214      	movs	r2, #20
 800296a:	18ba      	adds	r2, r7, r2
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002970:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	220f      	movs	r2, #15
 8002976:	4013      	ands	r3, r2
 8002978:	1d3a      	adds	r2, r7, #4
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800297e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	025b      	lsls	r3, r3, #9
 8002984:	4013      	ands	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800298a:	4812      	ldr	r0, [pc, #72]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800298c:	f7fd fbce 	bl	800012c <__udivsi3>
 8002990:	0003      	movs	r3, r0
 8002992:	001a      	movs	r2, r3
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	4353      	muls	r3, r2
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
 800299a:	e009      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800299c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299e:	000a      	movs	r2, r1
 80029a0:	0152      	lsls	r2, r2, #5
 80029a2:	1a52      	subs	r2, r2, r1
 80029a4:	0193      	lsls	r3, r2, #6
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	185b      	adds	r3, r3, r1
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029b4:	e002      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b00f      	add	sp, #60	; 0x3c
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	08004a1c 	.word	0x08004a1c
 80029cc:	08004a2c 	.word	0x08004a2c
 80029d0:	40021000 	.word	0x40021000
 80029d4:	007a1200 	.word	0x007a1200

080029d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029dc:	4b02      	ldr	r3, [pc, #8]	; (80029e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	20000000 	.word	0x20000000

080029ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80029f0:	f7ff fff2 	bl	80029d8 <HAL_RCC_GetHCLKFreq>
 80029f4:	0001      	movs	r1, r0
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	2207      	movs	r2, #7
 80029fe:	4013      	ands	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	40d9      	lsrs	r1, r3
 8002a06:	000b      	movs	r3, r1
}    
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08004a4c 	.word	0x08004a4c

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	025b      	lsls	r3, r3, #9
 8002a30:	4013      	ands	r3, r2
 8002a32:	d100      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a34:	e08e      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2017      	movs	r0, #23
 8002a38:	183b      	adds	r3, r7, r0
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b57      	ldr	r3, [pc, #348]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	055b      	lsls	r3, r3, #21
 8002a46:	4013      	ands	r3, r2
 8002a48:	d110      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a50:	2180      	movs	r1, #128	; 0x80
 8002a52:	0549      	lsls	r1, r1, #21
 8002a54:	430a      	orrs	r2, r1
 8002a56:	61da      	str	r2, [r3, #28]
 8002a58:	4b50      	ldr	r3, [pc, #320]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	055b      	lsls	r3, r3, #21
 8002a60:	4013      	ands	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d11a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a78:	4b49      	ldr	r3, [pc, #292]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b48      	ldr	r3, [pc, #288]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	0049      	lsls	r1, r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fa57 	bl	8000f38 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe fa52 	bl	8000f38 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e077      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aae:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	23c0      	movs	r3, #192	; 0xc0
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d034      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	23c0      	movs	r3, #192	; 0xc0
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d02c      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad0:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a33      	ldr	r2, [pc, #204]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	0249      	lsls	r1, r1, #9
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aea:	6a1a      	ldr	r2, [r3, #32]
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aee:	492e      	ldr	r1, [pc, #184]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fa19 	bl	8000f38 <HAL_GetTick>
 8002b06:	0003      	movs	r3, r0
 8002b08:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	e009      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe fa14 	bl	8000f38 <HAL_GetTick>
 8002b10:	0002      	movs	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	4a25      	ldr	r2, [pc, #148]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e038      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b3e:	2317      	movs	r3, #23
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b4e:	4918      	ldr	r1, [pc, #96]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	2203      	movs	r2, #3
 8002b64:	4393      	bics	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2220      	movs	r2, #32
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	2210      	movs	r2, #16
 8002b82:	4393      	bics	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b006      	add	sp, #24
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	fffffcff 	.word	0xfffffcff
 8002ba8:	fffeffff 	.word	0xfffeffff
 8002bac:	00001388 	.word	0x00001388
 8002bb0:	efffffff 	.word	0xefffffff

08002bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e042      	b.n	8002c4c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	223d      	movs	r2, #61	; 0x3d
 8002bca:	5c9b      	ldrb	r3, [r3, r2]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d107      	bne.n	8002be2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223c      	movs	r2, #60	; 0x3c
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7fe f825 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	223d      	movs	r2, #61	; 0x3d
 8002be6:	2102      	movs	r1, #2
 8002be8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	f000 f9af 	bl	8002f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2246      	movs	r2, #70	; 0x46
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223e      	movs	r2, #62	; 0x3e
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223f      	movs	r2, #63	; 0x3f
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2240      	movs	r2, #64	; 0x40
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2241      	movs	r2, #65	; 0x41
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2242      	movs	r2, #66	; 0x42
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2243      	movs	r2, #67	; 0x43
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2244      	movs	r2, #68	; 0x44
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2245      	movs	r2, #69	; 0x45
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223d      	movs	r2, #61	; 0x3d
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	223d      	movs	r2, #61	; 0x3d
 8002c60:	5c9b      	ldrb	r3, [r3, r2]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d001      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e035      	b.n	8002cd8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	223d      	movs	r2, #61	; 0x3d
 8002c70:	2102      	movs	r1, #2
 8002c72:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <HAL_TIM_Base_Start_IT+0x8c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_TIM_Base_Start_IT+0x90>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_TIM_Base_Start_IT+0x94>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d111      	bne.n	8002cc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2207      	movs	r2, #7
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d010      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	e007      	b.n	8002cd6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b004      	add	sp, #16
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40014000 	.word	0x40014000

08002cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d124      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d11d      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2203      	movs	r2, #3
 8002d16:	4252      	negs	r2, r2
 8002d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2203      	movs	r2, #3
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f8fa 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e007      	b.n	8002d46 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f8ed 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f8f9 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2204      	movs	r2, #4
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d125      	bne.n	8002da6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2204      	movs	r2, #4
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d11e      	bne.n	8002da6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	4252      	negs	r2, r2
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f8cd 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002d8e:	e007      	b.n	8002da0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f8c0 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f8cc 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2208      	movs	r2, #8
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d124      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d11d      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2209      	movs	r2, #9
 8002dc8:	4252      	negs	r2, r2
 8002dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f000 f8a1 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002de6:	e007      	b.n	8002df8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f894 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 f8a0 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2210      	movs	r2, #16
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d125      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2210      	movs	r2, #16
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d11e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2211      	movs	r2, #17
 8002e20:	4252      	negs	r2, r2
 8002e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2208      	movs	r2, #8
 8002e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	23c0      	movs	r3, #192	; 0xc0
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f874 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e007      	b.n	8002e52 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 f867 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 f873 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10f      	bne.n	8002e86 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d108      	bne.n	8002e86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4252      	negs	r2, r2
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fd fd61 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d10f      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	d108      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2281      	movs	r2, #129	; 0x81
 8002ea8:	4252      	negs	r2, r2
 8002eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 f8d0 	bl	8003054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2240      	movs	r2, #64	; 0x40
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2240      	movs	r2, #64	; 0x40
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d108      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2241      	movs	r2, #65	; 0x41
 8002ed6:	4252      	negs	r2, r2
 8002ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f833 	bl	8002f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d10f      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d108      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	4252      	negs	r2, r2
 8002f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 f89a 	bl	8003044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	; (8003028 <TIM_Base_SetConfig+0xd0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_Base_SetConfig+0x20>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a2e      	ldr	r2, [pc, #184]	; (800302c <TIM_Base_SetConfig+0xd4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2270      	movs	r2, #112	; 0x70
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a26      	ldr	r2, [pc, #152]	; (8003028 <TIM_Base_SetConfig+0xd0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <TIM_Base_SetConfig+0xd4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a24      	ldr	r2, [pc, #144]	; (8003030 <TIM_Base_SetConfig+0xd8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a23      	ldr	r2, [pc, #140]	; (8003034 <TIM_Base_SetConfig+0xdc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a22      	ldr	r2, [pc, #136]	; (8003038 <TIM_Base_SetConfig+0xe0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a21      	ldr	r2, [pc, #132]	; (800303c <TIM_Base_SetConfig+0xe4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <TIM_Base_SetConfig+0xe8>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <TIM_Base_SetConfig+0xd0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0xba>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <TIM_Base_SetConfig+0xdc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0xba>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <TIM_Base_SetConfig+0xe0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0xba>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <TIM_Base_SetConfig+0xe4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d103      	bne.n	800301a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	615a      	str	r2, [r3, #20]
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b004      	add	sp, #16
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40000400 	.word	0x40000400
 8003030:	40002000 	.word	0x40002000
 8003034:	40014000 	.word	0x40014000
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800
 8003040:	fffffcff 	.word	0xfffffcff

08003044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e044      	b.n	8003100 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2274      	movs	r2, #116	; 0x74
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f7fd fe27 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2224      	movs	r2, #36	; 0x24
 8003092:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	438a      	bics	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 fba6 	bl	80037f8 <UART_SetConfig>
 80030ac:	0003      	movs	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e024      	b.n	8003100 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 fcd9 	bl	8003a78 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	490d      	ldr	r1, [pc, #52]	; (8003108 <HAL_UART_Init+0xa4>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2108      	movs	r1, #8
 80030e2:	438a      	bics	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fd71 	bl	8003be0 <UART_CheckIdleState>
 80030fe:	0003      	movs	r3, r0
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b002      	add	sp, #8
 8003106:	bd80      	pop	{r7, pc}
 8003108:	fffff7ff 	.word	0xfffff7ff

0800310c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	1dbb      	adds	r3, r7, #6
 8003118:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311e:	2b20      	cmp	r3, #32
 8003120:	d000      	beq.n	8003124 <HAL_UART_Transmit_DMA+0x18>
 8003122:	e08a      	b.n	800323a <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_UART_Transmit_DMA+0x26>
 800312a:	1dbb      	adds	r3, r7, #6
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e082      	b.n	800323c <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	015b      	lsls	r3, r3, #5
 800313e:	429a      	cmp	r2, r3
 8003140:	d109      	bne.n	8003156 <HAL_UART_Transmit_DMA+0x4a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	d001      	beq.n	8003156 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e072      	b.n	800323c <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2274      	movs	r2, #116	; 0x74
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_UART_Transmit_DMA+0x58>
 8003160:	2302      	movs	r3, #2
 8003162:	e06b      	b.n	800323c <HAL_UART_Transmit_DMA+0x130>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2274      	movs	r2, #116	; 0x74
 8003168:	2101      	movs	r1, #1
 800316a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1dba      	adds	r2, r7, #6
 8003176:	2150      	movs	r1, #80	; 0x50
 8003178:	8812      	ldrh	r2, [r2, #0]
 800317a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1dba      	adds	r2, r7, #6
 8003180:	2152      	movs	r1, #82	; 0x52
 8003182:	8812      	ldrh	r2, [r2, #0]
 8003184:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	2100      	movs	r1, #0
 800318c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2221      	movs	r2, #33	; 0x21
 8003192:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02b      	beq.n	80031f4 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a0:	4a28      	ldr	r2, [pc, #160]	; (8003244 <HAL_UART_Transmit_DMA+0x138>)
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <HAL_UART_Transmit_DMA+0x13c>)
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b0:	4a26      	ldr	r2, [pc, #152]	; (800324c <HAL_UART_Transmit_DMA+0x140>)
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b8:	2200      	movs	r2, #0
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c4:	0019      	movs	r1, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3328      	adds	r3, #40	; 0x28
 80031cc:	001a      	movs	r2, r3
 80031ce:	1dbb      	adds	r3, r7, #6
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	f7fe fc59 	bl	8001a88 <HAL_DMA_Start_IT>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d00c      	beq.n	80031f4 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	2110      	movs	r1, #16
 80031e0:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2274      	movs	r2, #116	; 0x74
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e023      	b.n	800323c <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2240      	movs	r2, #64	; 0x40
 80031fa:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2274      	movs	r2, #116	; 0x74
 8003200:	2100      	movs	r1, #0
 8003202:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003204:	f3ef 8310 	mrs	r3, PRIMASK
 8003208:	613b      	str	r3, [r7, #16]
  return(result);
 800320a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	2301      	movs	r3, #1
 8003210:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f383 8810 	msr	PRIMASK, r3
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e000      	b.n	800323c <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
  }
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b008      	add	sp, #32
 8003242:	bd80      	pop	{r7, pc}
 8003244:	08003f05 	.word	0x08003f05
 8003248:	08003f99 	.word	0x08003f99
 800324c:	08003fb7 	.word	0x08003fb7

08003250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b0ab      	sub	sp, #172	; 0xac
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	22a4      	movs	r2, #164	; 0xa4
 8003260:	18b9      	adds	r1, r7, r2
 8003262:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	20a0      	movs	r0, #160	; 0xa0
 800326c:	1839      	adds	r1, r7, r0
 800326e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	219c      	movs	r1, #156	; 0x9c
 8003278:	1879      	adds	r1, r7, r1
 800327a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800327c:	0011      	movs	r1, r2
 800327e:	18bb      	adds	r3, r7, r2
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a99      	ldr	r2, [pc, #612]	; (80034e8 <HAL_UART_IRQHandler+0x298>)
 8003284:	4013      	ands	r3, r2
 8003286:	2298      	movs	r2, #152	; 0x98
 8003288:	18bc      	adds	r4, r7, r2
 800328a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800328c:	18bb      	adds	r3, r7, r2
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d114      	bne.n	80032be <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003294:	187b      	adds	r3, r7, r1
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2220      	movs	r2, #32
 800329a:	4013      	ands	r3, r2
 800329c:	d00f      	beq.n	80032be <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800329e:	183b      	adds	r3, r7, r0
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2220      	movs	r2, #32
 80032a4:	4013      	ands	r3, r2
 80032a6:	d00a      	beq.n	80032be <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d100      	bne.n	80032b2 <HAL_UART_IRQHandler+0x62>
 80032b0:	e27e      	b.n	80037b0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	0010      	movs	r0, r2
 80032ba:	4798      	blx	r3
      }
      return;
 80032bc:	e278      	b.n	80037b0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032be:	2398      	movs	r3, #152	; 0x98
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d100      	bne.n	80032ca <HAL_UART_IRQHandler+0x7a>
 80032c8:	e114      	b.n	80034f4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032ca:	239c      	movs	r3, #156	; 0x9c
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032d6:	23a0      	movs	r3, #160	; 0xa0
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a83      	ldr	r2, [pc, #524]	; (80034ec <HAL_UART_IRQHandler+0x29c>)
 80032de:	4013      	ands	r3, r2
 80032e0:	d100      	bne.n	80032e4 <HAL_UART_IRQHandler+0x94>
 80032e2:	e107      	b.n	80034f4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032e4:	23a4      	movs	r3, #164	; 0xa4
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2201      	movs	r2, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	d012      	beq.n	8003316 <HAL_UART_IRQHandler+0xc6>
 80032f0:	23a0      	movs	r3, #160	; 0xa0
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	d00b      	beq.n	8003316 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2201      	movs	r2, #1
 8003304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	589b      	ldr	r3, [r3, r2]
 800330c:	2201      	movs	r2, #1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003316:	23a4      	movs	r3, #164	; 0xa4
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2202      	movs	r2, #2
 800331e:	4013      	ands	r3, r2
 8003320:	d011      	beq.n	8003346 <HAL_UART_IRQHandler+0xf6>
 8003322:	239c      	movs	r3, #156	; 0x9c
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	4013      	ands	r3, r2
 800332c:	d00b      	beq.n	8003346 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2202      	movs	r2, #2
 8003334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	589b      	ldr	r3, [r3, r2]
 800333c:	2204      	movs	r2, #4
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2180      	movs	r1, #128	; 0x80
 8003344:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003346:	23a4      	movs	r3, #164	; 0xa4
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2204      	movs	r2, #4
 800334e:	4013      	ands	r3, r2
 8003350:	d011      	beq.n	8003376 <HAL_UART_IRQHandler+0x126>
 8003352:	239c      	movs	r3, #156	; 0x9c
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	4013      	ands	r3, r2
 800335c:	d00b      	beq.n	8003376 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2204      	movs	r2, #4
 8003364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2280      	movs	r2, #128	; 0x80
 800336a:	589b      	ldr	r3, [r3, r2]
 800336c:	2202      	movs	r2, #2
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003376:	23a4      	movs	r3, #164	; 0xa4
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2208      	movs	r2, #8
 800337e:	4013      	ands	r3, r2
 8003380:	d017      	beq.n	80033b2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003382:	23a0      	movs	r3, #160	; 0xa0
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2220      	movs	r2, #32
 800338a:	4013      	ands	r3, r2
 800338c:	d105      	bne.n	800339a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800338e:	239c      	movs	r3, #156	; 0x9c
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2201      	movs	r2, #1
 8003396:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003398:	d00b      	beq.n	80033b2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2208      	movs	r2, #8
 80033a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	589b      	ldr	r3, [r3, r2]
 80033a8:	2208      	movs	r2, #8
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033b2:	23a4      	movs	r3, #164	; 0xa4
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	d013      	beq.n	80033e8 <HAL_UART_IRQHandler+0x198>
 80033c0:	23a0      	movs	r3, #160	; 0xa0
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	04db      	lsls	r3, r3, #19
 80033ca:	4013      	ands	r3, r2
 80033cc:	d00c      	beq.n	80033e8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2280      	movs	r2, #128	; 0x80
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	589b      	ldr	r3, [r3, r2]
 80033de:	2220      	movs	r2, #32
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	589b      	ldr	r3, [r3, r2]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d100      	bne.n	80033f4 <HAL_UART_IRQHandler+0x1a4>
 80033f2:	e1df      	b.n	80037b4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033f4:	23a4      	movs	r3, #164	; 0xa4
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2220      	movs	r2, #32
 80033fc:	4013      	ands	r3, r2
 80033fe:	d00e      	beq.n	800341e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003400:	23a0      	movs	r3, #160	; 0xa0
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2220      	movs	r2, #32
 8003408:	4013      	ands	r3, r2
 800340a:	d008      	beq.n	800341e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	0010      	movs	r0, r2
 800341c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2280      	movs	r2, #128	; 0x80
 8003422:	589b      	ldr	r3, [r3, r2]
 8003424:	2194      	movs	r1, #148	; 0x94
 8003426:	187a      	adds	r2, r7, r1
 8003428:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2240      	movs	r2, #64	; 0x40
 8003432:	4013      	ands	r3, r2
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d004      	beq.n	8003442 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003438:	187b      	adds	r3, r7, r1
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2228      	movs	r2, #40	; 0x28
 800343e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003440:	d047      	beq.n	80034d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 fcfb 	bl	8003e40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2240      	movs	r2, #64	; 0x40
 8003452:	4013      	ands	r3, r2
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d137      	bne.n	80034c8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003458:	f3ef 8310 	mrs	r3, PRIMASK
 800345c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800345e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003460:	2090      	movs	r0, #144	; 0x90
 8003462:	183a      	adds	r2, r7, r0
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	2301      	movs	r3, #1
 8003468:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	438a      	bics	r2, r1
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	183b      	adds	r3, r7, r0
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	2b00      	cmp	r3, #0
 8003496:	d012      	beq.n	80034be <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_UART_IRQHandler+0x2a0>)
 800349e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7fe fb8d 	bl	8001bc4 <HAL_DMA_Abort_IT>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d01a      	beq.n	80034e4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	0018      	movs	r0, r3
 80034ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	e012      	b.n	80034e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f985 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c6:	e00d      	b.n	80034e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 f980 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d0:	e008      	b.n	80034e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 f97b 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	2100      	movs	r1, #0
 80034e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80034e2:	e167      	b.n	80037b4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	46c0      	nop			; (mov r8, r8)
    return;
 80034e6:	e165      	b.n	80037b4 <HAL_UART_IRQHandler+0x564>
 80034e8:	0000080f 	.word	0x0000080f
 80034ec:	04000120 	.word	0x04000120
 80034f0:	08004039 	.word	0x08004039

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d000      	beq.n	80034fe <HAL_UART_IRQHandler+0x2ae>
 80034fc:	e131      	b.n	8003762 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034fe:	23a4      	movs	r3, #164	; 0xa4
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2210      	movs	r2, #16
 8003506:	4013      	ands	r3, r2
 8003508:	d100      	bne.n	800350c <HAL_UART_IRQHandler+0x2bc>
 800350a:	e12a      	b.n	8003762 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800350c:	23a0      	movs	r3, #160	; 0xa0
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2210      	movs	r2, #16
 8003514:	4013      	ands	r3, r2
 8003516:	d100      	bne.n	800351a <HAL_UART_IRQHandler+0x2ca>
 8003518:	e123      	b.n	8003762 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2210      	movs	r2, #16
 8003520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	4013      	ands	r3, r2
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d000      	beq.n	8003532 <HAL_UART_IRQHandler+0x2e2>
 8003530:	e09b      	b.n	800366a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	217e      	movs	r1, #126	; 0x7e
 800353c:	187b      	adds	r3, r7, r1
 800353e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003540:	187b      	adds	r3, r7, r1
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d100      	bne.n	800354a <HAL_UART_IRQHandler+0x2fa>
 8003548:	e136      	b.n	80037b8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2258      	movs	r2, #88	; 0x58
 800354e:	5a9b      	ldrh	r3, [r3, r2]
 8003550:	187a      	adds	r2, r7, r1
 8003552:	8812      	ldrh	r2, [r2, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d300      	bcc.n	800355a <HAL_UART_IRQHandler+0x30a>
 8003558:	e12e      	b.n	80037b8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	187a      	adds	r2, r7, r1
 800355e:	215a      	movs	r1, #90	; 0x5a
 8003560:	8812      	ldrh	r2, [r2, #0]
 8003562:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b20      	cmp	r3, #32
 800356c:	d06e      	beq.n	800364c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356e:	f3ef 8310 	mrs	r3, PRIMASK
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003576:	67bb      	str	r3, [r7, #120]	; 0x78
 8003578:	2301      	movs	r3, #1
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	f383 8810 	msr	PRIMASK, r3
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	498e      	ldr	r1, [pc, #568]	; (80037c8 <HAL_UART_IRQHandler+0x578>)
 8003590:	400a      	ands	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003596:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	f383 8810 	msr	PRIMASK, r3
}
 800359e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a0:	f3ef 8310 	mrs	r3, PRIMASK
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80035a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a8:	677b      	str	r3, [r7, #116]	; 0x74
 80035aa:	2301      	movs	r3, #1
 80035ac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b0:	f383 8810 	msr	PRIMASK, r3
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2101      	movs	r1, #1
 80035c2:	438a      	bics	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035cc:	f383 8810 	msr	PRIMASK, r3
}
 80035d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d2:	f3ef 8310 	mrs	r3, PRIMASK
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80035d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	673b      	str	r3, [r7, #112]	; 0x70
 80035dc:	2301      	movs	r3, #1
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e2:	f383 8810 	msr	PRIMASK, r3
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2140      	movs	r1, #64	; 0x40
 80035f4:	438a      	bics	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035fa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003610:	f3ef 8310 	mrs	r3, PRIMASK
 8003614:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003616:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800361a:	2301      	movs	r3, #1
 800361c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2110      	movs	r1, #16
 8003632:	438a      	bics	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	0018      	movs	r0, r3
 8003648:	f7fe fa84 	bl	8001b54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2258      	movs	r2, #88	; 0x58
 8003650:	5a9a      	ldrh	r2, [r3, r2]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	215a      	movs	r1, #90	; 0x5a
 8003656:	5a5b      	ldrh	r3, [r3, r1]
 8003658:	b29b      	uxth	r3, r3
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0011      	movs	r1, r2
 8003662:	0018      	movs	r0, r3
 8003664:	f000 f8bc 	bl	80037e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003668:	e0a6      	b.n	80037b8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2258      	movs	r2, #88	; 0x58
 800366e:	5a99      	ldrh	r1, [r3, r2]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	225a      	movs	r2, #90	; 0x5a
 8003674:	5a9b      	ldrh	r3, [r3, r2]
 8003676:	b29a      	uxth	r2, r3
 8003678:	208e      	movs	r0, #142	; 0x8e
 800367a:	183b      	adds	r3, r7, r0
 800367c:	1a8a      	subs	r2, r1, r2
 800367e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	225a      	movs	r2, #90	; 0x5a
 8003684:	5a9b      	ldrh	r3, [r3, r2]
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d100      	bne.n	800368e <HAL_UART_IRQHandler+0x43e>
 800368c:	e096      	b.n	80037bc <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800368e:	183b      	adds	r3, r7, r0
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d100      	bne.n	8003698 <HAL_UART_IRQHandler+0x448>
 8003696:	e091      	b.n	80037bc <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	60fb      	str	r3, [r7, #12]
  return(result);
 800369e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a0:	2488      	movs	r4, #136	; 0x88
 80036a2:	193a      	adds	r2, r7, r4
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	2301      	movs	r3, #1
 80036a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4943      	ldr	r1, [pc, #268]	; (80037cc <HAL_UART_IRQHandler+0x57c>)
 80036be:	400a      	ands	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f383 8810 	msr	PRIMASK, r3
}
 80036ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d0:	f3ef 8310 	mrs	r3, PRIMASK
 80036d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80036d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d8:	2484      	movs	r4, #132	; 0x84
 80036da:	193a      	adds	r2, r7, r4
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	2301      	movs	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2101      	movs	r1, #1
 80036f6:	438a      	bics	r2, r1
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f383 8810 	msr	PRIMASK, r3
}
 8003706:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371a:	f3ef 8310 	mrs	r3, PRIMASK
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003722:	2480      	movs	r4, #128	; 0x80
 8003724:	193a      	adds	r2, r7, r4
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	2301      	movs	r3, #1
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2110      	movs	r1, #16
 8003740:	438a      	bics	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	193b      	adds	r3, r7, r4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	f383 8810 	msr	PRIMASK, r3
}
 8003750:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003752:	183b      	adds	r3, r7, r0
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f000 f840 	bl	80037e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003760:	e02c      	b.n	80037bc <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003762:	23a4      	movs	r3, #164	; 0xa4
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	4013      	ands	r3, r2
 800376c:	d00f      	beq.n	800378e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800376e:	23a0      	movs	r3, #160	; 0xa0
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	4013      	ands	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377e:	2b00      	cmp	r3, #0
 8003780:	d01e      	beq.n	80037c0 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	0010      	movs	r0, r2
 800378a:	4798      	blx	r3
    }
    return;
 800378c:	e018      	b.n	80037c0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800378e:	23a4      	movs	r3, #164	; 0xa4
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2240      	movs	r2, #64	; 0x40
 8003796:	4013      	ands	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_UART_IRQHandler+0x572>
 800379a:	23a0      	movs	r3, #160	; 0xa0
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	4013      	ands	r3, r2
 80037a4:	d00d      	beq.n	80037c2 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 fc5c 	bl	8004066 <UART_EndTransmit_IT>
    return;
 80037ae:	e008      	b.n	80037c2 <HAL_UART_IRQHandler+0x572>
      return;
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	e006      	b.n	80037c2 <HAL_UART_IRQHandler+0x572>
    return;
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	e004      	b.n	80037c2 <HAL_UART_IRQHandler+0x572>
      return;
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	e002      	b.n	80037c2 <HAL_UART_IRQHandler+0x572>
      return;
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	e000      	b.n	80037c2 <HAL_UART_IRQHandler+0x572>
    return;
 80037c0:	46c0      	nop			; (mov r8, r8)
  }

}
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b02b      	add	sp, #172	; 0xac
 80037c6:	bd90      	pop	{r4, r7, pc}
 80037c8:	fffffeff 	.word	0xfffffeff
 80037cc:	fffffedf 	.word	0xfffffedf

080037d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b002      	add	sp, #8
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	000a      	movs	r2, r1
 80037ea:	1cbb      	adds	r3, r7, #2
 80037ec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003800:	231e      	movs	r3, #30
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a8d      	ldr	r2, [pc, #564]	; (8003a5c <UART_SetConfig+0x264>)
 8003828:	4013      	ands	r3, r2
 800382a:	0019      	movs	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a88      	ldr	r2, [pc, #544]	; (8003a60 <UART_SetConfig+0x268>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a7f      	ldr	r2, [pc, #508]	; (8003a64 <UART_SetConfig+0x26c>)
 8003866:	4013      	ands	r3, r2
 8003868:	0019      	movs	r1, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a7b      	ldr	r2, [pc, #492]	; (8003a68 <UART_SetConfig+0x270>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d127      	bne.n	80038ce <UART_SetConfig+0xd6>
 800387e:	4b7b      	ldr	r3, [pc, #492]	; (8003a6c <UART_SetConfig+0x274>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	2203      	movs	r2, #3
 8003884:	4013      	ands	r3, r2
 8003886:	2b03      	cmp	r3, #3
 8003888:	d00d      	beq.n	80038a6 <UART_SetConfig+0xae>
 800388a:	d81b      	bhi.n	80038c4 <UART_SetConfig+0xcc>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d014      	beq.n	80038ba <UART_SetConfig+0xc2>
 8003890:	d818      	bhi.n	80038c4 <UART_SetConfig+0xcc>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <UART_SetConfig+0xa4>
 8003896:	2b01      	cmp	r3, #1
 8003898:	d00a      	beq.n	80038b0 <UART_SetConfig+0xb8>
 800389a:	e013      	b.n	80038c4 <UART_SetConfig+0xcc>
 800389c:	231f      	movs	r3, #31
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e021      	b.n	80038ea <UART_SetConfig+0xf2>
 80038a6:	231f      	movs	r3, #31
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e01c      	b.n	80038ea <UART_SetConfig+0xf2>
 80038b0:	231f      	movs	r3, #31
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e017      	b.n	80038ea <UART_SetConfig+0xf2>
 80038ba:	231f      	movs	r3, #31
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	2208      	movs	r2, #8
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e012      	b.n	80038ea <UART_SetConfig+0xf2>
 80038c4:	231f      	movs	r3, #31
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2210      	movs	r2, #16
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e00d      	b.n	80038ea <UART_SetConfig+0xf2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a67      	ldr	r2, [pc, #412]	; (8003a70 <UART_SetConfig+0x278>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d104      	bne.n	80038e2 <UART_SetConfig+0xea>
 80038d8:	231f      	movs	r3, #31
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e003      	b.n	80038ea <UART_SetConfig+0xf2>
 80038e2:	231f      	movs	r3, #31
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	2210      	movs	r2, #16
 80038e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d15d      	bne.n	80039b2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80038f6:	231f      	movs	r3, #31
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d015      	beq.n	800392c <UART_SetConfig+0x134>
 8003900:	dc18      	bgt.n	8003934 <UART_SetConfig+0x13c>
 8003902:	2b04      	cmp	r3, #4
 8003904:	d00d      	beq.n	8003922 <UART_SetConfig+0x12a>
 8003906:	dc15      	bgt.n	8003934 <UART_SetConfig+0x13c>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <UART_SetConfig+0x11a>
 800390c:	2b02      	cmp	r3, #2
 800390e:	d005      	beq.n	800391c <UART_SetConfig+0x124>
 8003910:	e010      	b.n	8003934 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003912:	f7ff f86b 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 8003916:	0003      	movs	r3, r0
 8003918:	61bb      	str	r3, [r7, #24]
        break;
 800391a:	e012      	b.n	8003942 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800391c:	4b55      	ldr	r3, [pc, #340]	; (8003a74 <UART_SetConfig+0x27c>)
 800391e:	61bb      	str	r3, [r7, #24]
        break;
 8003920:	e00f      	b.n	8003942 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003922:	f7fe fff5 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 8003926:	0003      	movs	r3, r0
 8003928:	61bb      	str	r3, [r7, #24]
        break;
 800392a:	e00a      	b.n	8003942 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	61bb      	str	r3, [r7, #24]
        break;
 8003932:	e006      	b.n	8003942 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003938:	231e      	movs	r3, #30
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
        break;
 8003940:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d100      	bne.n	800394a <UART_SetConfig+0x152>
 8003948:	e07b      	b.n	8003a42 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	005a      	lsls	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	18d2      	adds	r2, r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	0019      	movs	r1, r3
 800395c:	0010      	movs	r0, r2
 800395e:	f7fc fbe5 	bl	800012c <__udivsi3>
 8003962:	0003      	movs	r3, r0
 8003964:	b29b      	uxth	r3, r3
 8003966:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b0f      	cmp	r3, #15
 800396c:	d91c      	bls.n	80039a8 <UART_SetConfig+0x1b0>
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	025b      	lsls	r3, r3, #9
 8003974:	429a      	cmp	r2, r3
 8003976:	d217      	bcs.n	80039a8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	b29a      	uxth	r2, r3
 800397c:	200e      	movs	r0, #14
 800397e:	183b      	adds	r3, r7, r0
 8003980:	210f      	movs	r1, #15
 8003982:	438a      	bics	r2, r1
 8003984:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	b29b      	uxth	r3, r3
 800398c:	2207      	movs	r2, #7
 800398e:	4013      	ands	r3, r2
 8003990:	b299      	uxth	r1, r3
 8003992:	183b      	adds	r3, r7, r0
 8003994:	183a      	adds	r2, r7, r0
 8003996:	8812      	ldrh	r2, [r2, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	183a      	adds	r2, r7, r0
 80039a2:	8812      	ldrh	r2, [r2, #0]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e04c      	b.n	8003a42 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80039a8:	231e      	movs	r3, #30
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	e047      	b.n	8003a42 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039b2:	231f      	movs	r3, #31
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d015      	beq.n	80039e8 <UART_SetConfig+0x1f0>
 80039bc:	dc18      	bgt.n	80039f0 <UART_SetConfig+0x1f8>
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d00d      	beq.n	80039de <UART_SetConfig+0x1e6>
 80039c2:	dc15      	bgt.n	80039f0 <UART_SetConfig+0x1f8>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <UART_SetConfig+0x1d6>
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d005      	beq.n	80039d8 <UART_SetConfig+0x1e0>
 80039cc:	e010      	b.n	80039f0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ce:	f7ff f80d 	bl	80029ec <HAL_RCC_GetPCLK1Freq>
 80039d2:	0003      	movs	r3, r0
 80039d4:	61bb      	str	r3, [r7, #24]
        break;
 80039d6:	e012      	b.n	80039fe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d8:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <UART_SetConfig+0x27c>)
 80039da:	61bb      	str	r3, [r7, #24]
        break;
 80039dc:	e00f      	b.n	80039fe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039de:	f7fe ff97 	bl	8002910 <HAL_RCC_GetSysClockFreq>
 80039e2:	0003      	movs	r3, r0
 80039e4:	61bb      	str	r3, [r7, #24]
        break;
 80039e6:	e00a      	b.n	80039fe <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	61bb      	str	r3, [r7, #24]
        break;
 80039ee:	e006      	b.n	80039fe <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039f4:	231e      	movs	r3, #30
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
        break;
 80039fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01e      	beq.n	8003a42 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	085a      	lsrs	r2, r3, #1
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	18d2      	adds	r2, r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0019      	movs	r1, r3
 8003a14:	0010      	movs	r0, r2
 8003a16:	f7fc fb89 	bl	800012c <__udivsi3>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b0f      	cmp	r3, #15
 8003a24:	d909      	bls.n	8003a3a <UART_SetConfig+0x242>
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	025b      	lsls	r3, r3, #9
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d204      	bcs.n	8003a3a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	e003      	b.n	8003a42 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3a:	231e      	movs	r3, #30
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a4e:	231e      	movs	r3, #30
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	781b      	ldrb	r3, [r3, #0]
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b008      	add	sp, #32
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	ffff69f3 	.word	0xffff69f3
 8003a60:	ffffcfff 	.word	0xffffcfff
 8003a64:	fffff4ff 	.word	0xfffff4ff
 8003a68:	40013800 	.word	0x40013800
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40004400 	.word	0x40004400
 8003a74:	007a1200 	.word	0x007a1200

08003a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2201      	movs	r2, #1
 8003a86:	4013      	ands	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a4a      	ldr	r2, [pc, #296]	; (8003bbc <UART_AdvFeatureConfig+0x144>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4a43      	ldr	r2, [pc, #268]	; (8003bc0 <UART_AdvFeatureConfig+0x148>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	2204      	movs	r2, #4
 8003aca:	4013      	ands	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4a3b      	ldr	r2, [pc, #236]	; (8003bc4 <UART_AdvFeatureConfig+0x14c>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	2208      	movs	r2, #8
 8003aec:	4013      	ands	r3, r2
 8003aee:	d00b      	beq.n	8003b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4a34      	ldr	r2, [pc, #208]	; (8003bc8 <UART_AdvFeatureConfig+0x150>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d00b      	beq.n	8003b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a2c      	ldr	r2, [pc, #176]	; (8003bcc <UART_AdvFeatureConfig+0x154>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2220      	movs	r2, #32
 8003b30:	4013      	ands	r3, r2
 8003b32:	d00b      	beq.n	8003b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <UART_AdvFeatureConfig+0x158>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	4013      	ands	r3, r2
 8003b54:	d01d      	beq.n	8003b92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <UART_AdvFeatureConfig+0x15c>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	035b      	lsls	r3, r3, #13
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d10b      	bne.n	8003b92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <UART_AdvFeatureConfig+0x160>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d00b      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <UART_AdvFeatureConfig+0x164>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	fffdffff 	.word	0xfffdffff
 8003bc0:	fffeffff 	.word	0xfffeffff
 8003bc4:	fffbffff 	.word	0xfffbffff
 8003bc8:	ffff7fff 	.word	0xffff7fff
 8003bcc:	ffffefff 	.word	0xffffefff
 8003bd0:	ffffdfff 	.word	0xffffdfff
 8003bd4:	ffefffff 	.word	0xffefffff
 8003bd8:	ff9fffff 	.word	0xff9fffff
 8003bdc:	fff7ffff 	.word	0xfff7ffff

08003be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	2100      	movs	r1, #0
 8003bee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf0:	f7fd f9a2 	bl	8000f38 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2208      	movs	r2, #8
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d10c      	bne.n	8003c20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	0391      	lsls	r1, r2, #14
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <UART_CheckIdleState+0x8c>)
 8003c10:	9200      	str	r2, [sp, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f000 f82c 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d001      	beq.n	8003c20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e021      	b.n	8003c64 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2204      	movs	r2, #4
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d10c      	bne.n	8003c48 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	03d1      	lsls	r1, r2, #15
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <UART_CheckIdleState+0x8c>)
 8003c38:	9200      	str	r2, [sp, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f000 f818 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003c40:	1e03      	subs	r3, r0, #0
 8003c42:	d001      	beq.n	8003c48 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e00d      	b.n	8003c64 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2274      	movs	r2, #116	; 0x74
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b004      	add	sp, #16
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	01ffffff 	.word	0x01ffffff

08003c70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b094      	sub	sp, #80	; 0x50
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c80:	e0a3      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c84:	3301      	adds	r3, #1
 8003c86:	d100      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c88:	e09f      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7fd f955 	bl	8000f38 <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d13d      	bne.n	8003d1c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8003caa:	2301      	movs	r3, #1
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	f383 8810 	msr	PRIMASK, r3
}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	494c      	ldr	r1, [pc, #304]	; (8003df4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	f383 8810 	msr	PRIMASK, r3
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cda:	643b      	str	r3, [r7, #64]	; 0x40
 8003cdc:	2301      	movs	r3, #1
 8003cde:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	f383 8810 	msr	PRIMASK, r3
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfe:	f383 8810 	msr	PRIMASK, r3
}
 8003d02:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2274      	movs	r2, #116	; 0x74
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e067      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2204      	movs	r2, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	d050      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	401a      	ands	r2, r3
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d146      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	613b      	str	r3, [r7, #16]
  return(result);
 8003d4c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4923      	ldr	r1, [pc, #140]	; (8003df4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003d68:	400a      	ands	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d78:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d82:	2301      	movs	r3, #1
 8003d84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	438a      	bics	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2280      	movs	r2, #128	; 0x80
 8003dba:	2120      	movs	r1, #32
 8003dbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2274      	movs	r2, #116	; 0x74
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e010      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	425a      	negs	r2, r3
 8003dda:	4153      	adcs	r3, r2
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	001a      	movs	r2, r3
 8003de0:	1dfb      	adds	r3, r7, #7
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d100      	bne.n	8003dea <UART_WaitOnFlagUntilTimeout+0x17a>
 8003de8:	e74b      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b014      	add	sp, #80	; 0x50
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	fffffe5f 	.word	0xfffffe5f

08003df8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e00:	f3ef 8310 	mrs	r3, PRIMASK
 8003e04:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e06:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	21c0      	movs	r1, #192	; 0xc0
 8003e22:	438a      	bics	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b006      	add	sp, #24
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08e      	sub	sp, #56	; 0x38
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e48:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
 8003e52:	2301      	movs	r3, #1
 8003e54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4925      	ldr	r1, [pc, #148]	; (8003f00 <UART_EndRxTransfer+0xc0>)
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7e:	623b      	str	r3, [r7, #32]
  return(result);
 8003e80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
 8003e84:	2301      	movs	r3, #1
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f383 8810 	msr	PRIMASK, r3
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	f383 8810 	msr	PRIMASK, r3
}
 8003eaa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d118      	bne.n	8003ee6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2110      	movs	r1, #16
 8003ed6:	438a      	bics	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b00e      	add	sp, #56	; 0x38
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	fffffedf 	.word	0xfffffedf

08003f04 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	; 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d035      	beq.n	8003f86 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	2252      	movs	r2, #82	; 0x52
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f22:	f3ef 8310 	mrs	r3, PRIMASK
 8003f26:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f28:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	438a      	bics	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f383 8810 	msr	PRIMASK, r3
}
 8003f52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f54:	f3ef 8310 	mrs	r3, PRIMASK
 8003f58:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f5a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f383 8810 	msr	PRIMASK, r3
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	430a      	orrs	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f383 8810 	msr	PRIMASK, r3
}
 8003f84:	e004      	b.n	8003f90 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fc fc33 	bl	80007f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b00c      	add	sp, #48	; 0x30
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7fc fc2b 	bl	8000804 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b004      	add	sp, #16
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2b80      	cmp	r3, #128	; 0x80
 8003fdc:	d10a      	bne.n	8003ff4 <UART_DMAError+0x3e>
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b21      	cmp	r3, #33	; 0x21
 8003fe2:	d107      	bne.n	8003ff4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2252      	movs	r2, #82	; 0x52
 8003fe8:	2100      	movs	r1, #0
 8003fea:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff ff02 	bl	8003df8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2240      	movs	r2, #64	; 0x40
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d10a      	bne.n	8004018 <UART_DMAError+0x62>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b22      	cmp	r3, #34	; 0x22
 8004006:	d107      	bne.n	8004018 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	225a      	movs	r2, #90	; 0x5a
 800400c:	2100      	movs	r1, #0
 800400e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff ff14 	bl	8003e40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2280      	movs	r2, #128	; 0x80
 800401c:	589b      	ldr	r3, [r3, r2]
 800401e:	2210      	movs	r2, #16
 8004020:	431a      	orrs	r2, r3
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fbd0 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b006      	add	sp, #24
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	225a      	movs	r2, #90	; 0x5a
 800404a:	2100      	movs	r1, #0
 800404c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2252      	movs	r2, #82	; 0x52
 8004052:	2100      	movs	r1, #0
 8004054:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	0018      	movs	r0, r3
 800405a:	f7ff fbb9 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b004      	add	sp, #16
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406e:	f3ef 8310 	mrs	r3, PRIMASK
 8004072:	60bb      	str	r3, [r7, #8]
  return(result);
 8004074:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	2301      	movs	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f383 8810 	msr	PRIMASK, r3
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2140      	movs	r1, #64	; 0x40
 8004090:	438a      	bics	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f383 8810 	msr	PRIMASK, r3
}
 800409e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7fc fba0 	bl	80007f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b006      	add	sp, #24
 80040ba:	bd80      	pop	{r7, pc}

080040bc <__errno>:
 80040bc:	4b01      	ldr	r3, [pc, #4]	; (80040c4 <__errno+0x8>)
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	4770      	bx	lr
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <__libc_init_array>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	2600      	movs	r6, #0
 80040cc:	4d0c      	ldr	r5, [pc, #48]	; (8004100 <__libc_init_array+0x38>)
 80040ce:	4c0d      	ldr	r4, [pc, #52]	; (8004104 <__libc_init_array+0x3c>)
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	42a6      	cmp	r6, r4
 80040d6:	d109      	bne.n	80040ec <__libc_init_array+0x24>
 80040d8:	2600      	movs	r6, #0
 80040da:	f000 fc8b 	bl	80049f4 <_init>
 80040de:	4d0a      	ldr	r5, [pc, #40]	; (8004108 <__libc_init_array+0x40>)
 80040e0:	4c0a      	ldr	r4, [pc, #40]	; (800410c <__libc_init_array+0x44>)
 80040e2:	1b64      	subs	r4, r4, r5
 80040e4:	10a4      	asrs	r4, r4, #2
 80040e6:	42a6      	cmp	r6, r4
 80040e8:	d105      	bne.n	80040f6 <__libc_init_array+0x2e>
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
 80040ec:	00b3      	lsls	r3, r6, #2
 80040ee:	58eb      	ldr	r3, [r5, r3]
 80040f0:	4798      	blx	r3
 80040f2:	3601      	adds	r6, #1
 80040f4:	e7ee      	b.n	80040d4 <__libc_init_array+0xc>
 80040f6:	00b3      	lsls	r3, r6, #2
 80040f8:	58eb      	ldr	r3, [r5, r3]
 80040fa:	4798      	blx	r3
 80040fc:	3601      	adds	r6, #1
 80040fe:	e7f2      	b.n	80040e6 <__libc_init_array+0x1e>
 8004100:	08004a88 	.word	0x08004a88
 8004104:	08004a88 	.word	0x08004a88
 8004108:	08004a88 	.word	0x08004a88
 800410c:	08004a8c 	.word	0x08004a8c

08004110 <memset>:
 8004110:	0003      	movs	r3, r0
 8004112:	1882      	adds	r2, r0, r2
 8004114:	4293      	cmp	r3, r2
 8004116:	d100      	bne.n	800411a <memset+0xa>
 8004118:	4770      	bx	lr
 800411a:	7019      	strb	r1, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	e7f9      	b.n	8004114 <memset+0x4>

08004120 <siprintf>:
 8004120:	b40e      	push	{r1, r2, r3}
 8004122:	b500      	push	{lr}
 8004124:	490b      	ldr	r1, [pc, #44]	; (8004154 <siprintf+0x34>)
 8004126:	b09c      	sub	sp, #112	; 0x70
 8004128:	ab1d      	add	r3, sp, #116	; 0x74
 800412a:	9002      	str	r0, [sp, #8]
 800412c:	9006      	str	r0, [sp, #24]
 800412e:	9107      	str	r1, [sp, #28]
 8004130:	9104      	str	r1, [sp, #16]
 8004132:	4809      	ldr	r0, [pc, #36]	; (8004158 <siprintf+0x38>)
 8004134:	4909      	ldr	r1, [pc, #36]	; (800415c <siprintf+0x3c>)
 8004136:	cb04      	ldmia	r3!, {r2}
 8004138:	9105      	str	r1, [sp, #20]
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	a902      	add	r1, sp, #8
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	f000 f870 	bl	8004224 <_svfiprintf_r>
 8004144:	2300      	movs	r3, #0
 8004146:	9a02      	ldr	r2, [sp, #8]
 8004148:	7013      	strb	r3, [r2, #0]
 800414a:	b01c      	add	sp, #112	; 0x70
 800414c:	bc08      	pop	{r3}
 800414e:	b003      	add	sp, #12
 8004150:	4718      	bx	r3
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	7fffffff 	.word	0x7fffffff
 8004158:	2000000c 	.word	0x2000000c
 800415c:	ffff0208 	.word	0xffff0208

08004160 <__ssputs_r>:
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	688e      	ldr	r6, [r1, #8]
 8004164:	b085      	sub	sp, #20
 8004166:	0007      	movs	r7, r0
 8004168:	000c      	movs	r4, r1
 800416a:	9203      	str	r2, [sp, #12]
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	429e      	cmp	r6, r3
 8004170:	d83c      	bhi.n	80041ec <__ssputs_r+0x8c>
 8004172:	2390      	movs	r3, #144	; 0x90
 8004174:	898a      	ldrh	r2, [r1, #12]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	421a      	tst	r2, r3
 800417a:	d034      	beq.n	80041e6 <__ssputs_r+0x86>
 800417c:	6909      	ldr	r1, [r1, #16]
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	6960      	ldr	r0, [r4, #20]
 8004182:	1a5b      	subs	r3, r3, r1
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	2303      	movs	r3, #3
 8004188:	4343      	muls	r3, r0
 800418a:	0fdd      	lsrs	r5, r3, #31
 800418c:	18ed      	adds	r5, r5, r3
 800418e:	9b01      	ldr	r3, [sp, #4]
 8004190:	9802      	ldr	r0, [sp, #8]
 8004192:	3301      	adds	r3, #1
 8004194:	181b      	adds	r3, r3, r0
 8004196:	106d      	asrs	r5, r5, #1
 8004198:	42ab      	cmp	r3, r5
 800419a:	d900      	bls.n	800419e <__ssputs_r+0x3e>
 800419c:	001d      	movs	r5, r3
 800419e:	0553      	lsls	r3, r2, #21
 80041a0:	d532      	bpl.n	8004208 <__ssputs_r+0xa8>
 80041a2:	0029      	movs	r1, r5
 80041a4:	0038      	movs	r0, r7
 80041a6:	f000 fb53 	bl	8004850 <_malloc_r>
 80041aa:	1e06      	subs	r6, r0, #0
 80041ac:	d109      	bne.n	80041c2 <__ssputs_r+0x62>
 80041ae:	230c      	movs	r3, #12
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	2340      	movs	r3, #64	; 0x40
 80041b4:	2001      	movs	r0, #1
 80041b6:	89a2      	ldrh	r2, [r4, #12]
 80041b8:	4240      	negs	r0, r0
 80041ba:	4313      	orrs	r3, r2
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	b005      	add	sp, #20
 80041c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c2:	9a02      	ldr	r2, [sp, #8]
 80041c4:	6921      	ldr	r1, [r4, #16]
 80041c6:	f000 faba 	bl	800473e <memcpy>
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <__ssputs_r+0xc0>)
 80041ce:	401a      	ands	r2, r3
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	4313      	orrs	r3, r2
 80041d4:	81a3      	strh	r3, [r4, #12]
 80041d6:	9b02      	ldr	r3, [sp, #8]
 80041d8:	6126      	str	r6, [r4, #16]
 80041da:	18f6      	adds	r6, r6, r3
 80041dc:	6026      	str	r6, [r4, #0]
 80041de:	6165      	str	r5, [r4, #20]
 80041e0:	9e01      	ldr	r6, [sp, #4]
 80041e2:	1aed      	subs	r5, r5, r3
 80041e4:	60a5      	str	r5, [r4, #8]
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	429e      	cmp	r6, r3
 80041ea:	d900      	bls.n	80041ee <__ssputs_r+0x8e>
 80041ec:	9e01      	ldr	r6, [sp, #4]
 80041ee:	0032      	movs	r2, r6
 80041f0:	9903      	ldr	r1, [sp, #12]
 80041f2:	6820      	ldr	r0, [r4, #0]
 80041f4:	f000 faac 	bl	8004750 <memmove>
 80041f8:	68a3      	ldr	r3, [r4, #8]
 80041fa:	2000      	movs	r0, #0
 80041fc:	1b9b      	subs	r3, r3, r6
 80041fe:	60a3      	str	r3, [r4, #8]
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	199e      	adds	r6, r3, r6
 8004204:	6026      	str	r6, [r4, #0]
 8004206:	e7da      	b.n	80041be <__ssputs_r+0x5e>
 8004208:	002a      	movs	r2, r5
 800420a:	0038      	movs	r0, r7
 800420c:	f000 fb96 	bl	800493c <_realloc_r>
 8004210:	1e06      	subs	r6, r0, #0
 8004212:	d1e0      	bne.n	80041d6 <__ssputs_r+0x76>
 8004214:	0038      	movs	r0, r7
 8004216:	6921      	ldr	r1, [r4, #16]
 8004218:	f000 faae 	bl	8004778 <_free_r>
 800421c:	e7c7      	b.n	80041ae <__ssputs_r+0x4e>
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	fffffb7f 	.word	0xfffffb7f

08004224 <_svfiprintf_r>:
 8004224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004226:	b0a1      	sub	sp, #132	; 0x84
 8004228:	9003      	str	r0, [sp, #12]
 800422a:	001d      	movs	r5, r3
 800422c:	898b      	ldrh	r3, [r1, #12]
 800422e:	000f      	movs	r7, r1
 8004230:	0016      	movs	r6, r2
 8004232:	061b      	lsls	r3, r3, #24
 8004234:	d511      	bpl.n	800425a <_svfiprintf_r+0x36>
 8004236:	690b      	ldr	r3, [r1, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10e      	bne.n	800425a <_svfiprintf_r+0x36>
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	f000 fb07 	bl	8004850 <_malloc_r>
 8004242:	6038      	str	r0, [r7, #0]
 8004244:	6138      	str	r0, [r7, #16]
 8004246:	2800      	cmp	r0, #0
 8004248:	d105      	bne.n	8004256 <_svfiprintf_r+0x32>
 800424a:	230c      	movs	r3, #12
 800424c:	9a03      	ldr	r2, [sp, #12]
 800424e:	3801      	subs	r0, #1
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	b021      	add	sp, #132	; 0x84
 8004254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004256:	2340      	movs	r3, #64	; 0x40
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	2300      	movs	r3, #0
 800425c:	ac08      	add	r4, sp, #32
 800425e:	6163      	str	r3, [r4, #20]
 8004260:	3320      	adds	r3, #32
 8004262:	7663      	strb	r3, [r4, #25]
 8004264:	3310      	adds	r3, #16
 8004266:	76a3      	strb	r3, [r4, #26]
 8004268:	9507      	str	r5, [sp, #28]
 800426a:	0035      	movs	r5, r6
 800426c:	782b      	ldrb	r3, [r5, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <_svfiprintf_r+0x52>
 8004272:	2b25      	cmp	r3, #37	; 0x25
 8004274:	d147      	bne.n	8004306 <_svfiprintf_r+0xe2>
 8004276:	1bab      	subs	r3, r5, r6
 8004278:	9305      	str	r3, [sp, #20]
 800427a:	42b5      	cmp	r5, r6
 800427c:	d00c      	beq.n	8004298 <_svfiprintf_r+0x74>
 800427e:	0032      	movs	r2, r6
 8004280:	0039      	movs	r1, r7
 8004282:	9803      	ldr	r0, [sp, #12]
 8004284:	f7ff ff6c 	bl	8004160 <__ssputs_r>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d100      	bne.n	800428e <_svfiprintf_r+0x6a>
 800428c:	e0ae      	b.n	80043ec <_svfiprintf_r+0x1c8>
 800428e:	6962      	ldr	r2, [r4, #20]
 8004290:	9b05      	ldr	r3, [sp, #20]
 8004292:	4694      	mov	ip, r2
 8004294:	4463      	add	r3, ip
 8004296:	6163      	str	r3, [r4, #20]
 8004298:	782b      	ldrb	r3, [r5, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d100      	bne.n	80042a0 <_svfiprintf_r+0x7c>
 800429e:	e0a5      	b.n	80043ec <_svfiprintf_r+0x1c8>
 80042a0:	2201      	movs	r2, #1
 80042a2:	2300      	movs	r3, #0
 80042a4:	4252      	negs	r2, r2
 80042a6:	6062      	str	r2, [r4, #4]
 80042a8:	a904      	add	r1, sp, #16
 80042aa:	3254      	adds	r2, #84	; 0x54
 80042ac:	1852      	adds	r2, r2, r1
 80042ae:	1c6e      	adds	r6, r5, #1
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	60e3      	str	r3, [r4, #12]
 80042b4:	60a3      	str	r3, [r4, #8]
 80042b6:	7013      	strb	r3, [r2, #0]
 80042b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80042ba:	2205      	movs	r2, #5
 80042bc:	7831      	ldrb	r1, [r6, #0]
 80042be:	4854      	ldr	r0, [pc, #336]	; (8004410 <_svfiprintf_r+0x1ec>)
 80042c0:	f000 fa32 	bl	8004728 <memchr>
 80042c4:	1c75      	adds	r5, r6, #1
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d11f      	bne.n	800430a <_svfiprintf_r+0xe6>
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	06d3      	lsls	r3, r2, #27
 80042ce:	d504      	bpl.n	80042da <_svfiprintf_r+0xb6>
 80042d0:	2353      	movs	r3, #83	; 0x53
 80042d2:	a904      	add	r1, sp, #16
 80042d4:	185b      	adds	r3, r3, r1
 80042d6:	2120      	movs	r1, #32
 80042d8:	7019      	strb	r1, [r3, #0]
 80042da:	0713      	lsls	r3, r2, #28
 80042dc:	d504      	bpl.n	80042e8 <_svfiprintf_r+0xc4>
 80042de:	2353      	movs	r3, #83	; 0x53
 80042e0:	a904      	add	r1, sp, #16
 80042e2:	185b      	adds	r3, r3, r1
 80042e4:	212b      	movs	r1, #43	; 0x2b
 80042e6:	7019      	strb	r1, [r3, #0]
 80042e8:	7833      	ldrb	r3, [r6, #0]
 80042ea:	2b2a      	cmp	r3, #42	; 0x2a
 80042ec:	d016      	beq.n	800431c <_svfiprintf_r+0xf8>
 80042ee:	0035      	movs	r5, r6
 80042f0:	2100      	movs	r1, #0
 80042f2:	200a      	movs	r0, #10
 80042f4:	68e3      	ldr	r3, [r4, #12]
 80042f6:	782a      	ldrb	r2, [r5, #0]
 80042f8:	1c6e      	adds	r6, r5, #1
 80042fa:	3a30      	subs	r2, #48	; 0x30
 80042fc:	2a09      	cmp	r2, #9
 80042fe:	d94e      	bls.n	800439e <_svfiprintf_r+0x17a>
 8004300:	2900      	cmp	r1, #0
 8004302:	d111      	bne.n	8004328 <_svfiprintf_r+0x104>
 8004304:	e017      	b.n	8004336 <_svfiprintf_r+0x112>
 8004306:	3501      	adds	r5, #1
 8004308:	e7b0      	b.n	800426c <_svfiprintf_r+0x48>
 800430a:	4b41      	ldr	r3, [pc, #260]	; (8004410 <_svfiprintf_r+0x1ec>)
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	1ac0      	subs	r0, r0, r3
 8004310:	2301      	movs	r3, #1
 8004312:	4083      	lsls	r3, r0
 8004314:	4313      	orrs	r3, r2
 8004316:	002e      	movs	r6, r5
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	e7ce      	b.n	80042ba <_svfiprintf_r+0x96>
 800431c:	9b07      	ldr	r3, [sp, #28]
 800431e:	1d19      	adds	r1, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	9107      	str	r1, [sp, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db01      	blt.n	800432c <_svfiprintf_r+0x108>
 8004328:	930b      	str	r3, [sp, #44]	; 0x2c
 800432a:	e004      	b.n	8004336 <_svfiprintf_r+0x112>
 800432c:	425b      	negs	r3, r3
 800432e:	60e3      	str	r3, [r4, #12]
 8004330:	2302      	movs	r3, #2
 8004332:	4313      	orrs	r3, r2
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	782b      	ldrb	r3, [r5, #0]
 8004338:	2b2e      	cmp	r3, #46	; 0x2e
 800433a:	d10a      	bne.n	8004352 <_svfiprintf_r+0x12e>
 800433c:	786b      	ldrb	r3, [r5, #1]
 800433e:	2b2a      	cmp	r3, #42	; 0x2a
 8004340:	d135      	bne.n	80043ae <_svfiprintf_r+0x18a>
 8004342:	9b07      	ldr	r3, [sp, #28]
 8004344:	3502      	adds	r5, #2
 8004346:	1d1a      	adds	r2, r3, #4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	9207      	str	r2, [sp, #28]
 800434c:	2b00      	cmp	r3, #0
 800434e:	db2b      	blt.n	80043a8 <_svfiprintf_r+0x184>
 8004350:	9309      	str	r3, [sp, #36]	; 0x24
 8004352:	4e30      	ldr	r6, [pc, #192]	; (8004414 <_svfiprintf_r+0x1f0>)
 8004354:	2203      	movs	r2, #3
 8004356:	0030      	movs	r0, r6
 8004358:	7829      	ldrb	r1, [r5, #0]
 800435a:	f000 f9e5 	bl	8004728 <memchr>
 800435e:	2800      	cmp	r0, #0
 8004360:	d006      	beq.n	8004370 <_svfiprintf_r+0x14c>
 8004362:	2340      	movs	r3, #64	; 0x40
 8004364:	1b80      	subs	r0, r0, r6
 8004366:	4083      	lsls	r3, r0
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	3501      	adds	r5, #1
 800436c:	4313      	orrs	r3, r2
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	7829      	ldrb	r1, [r5, #0]
 8004372:	2206      	movs	r2, #6
 8004374:	4828      	ldr	r0, [pc, #160]	; (8004418 <_svfiprintf_r+0x1f4>)
 8004376:	1c6e      	adds	r6, r5, #1
 8004378:	7621      	strb	r1, [r4, #24]
 800437a:	f000 f9d5 	bl	8004728 <memchr>
 800437e:	2800      	cmp	r0, #0
 8004380:	d03c      	beq.n	80043fc <_svfiprintf_r+0x1d8>
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <_svfiprintf_r+0x1f8>)
 8004384:	2b00      	cmp	r3, #0
 8004386:	d125      	bne.n	80043d4 <_svfiprintf_r+0x1b0>
 8004388:	2207      	movs	r2, #7
 800438a:	9b07      	ldr	r3, [sp, #28]
 800438c:	3307      	adds	r3, #7
 800438e:	4393      	bics	r3, r2
 8004390:	3308      	adds	r3, #8
 8004392:	9307      	str	r3, [sp, #28]
 8004394:	6963      	ldr	r3, [r4, #20]
 8004396:	9a04      	ldr	r2, [sp, #16]
 8004398:	189b      	adds	r3, r3, r2
 800439a:	6163      	str	r3, [r4, #20]
 800439c:	e765      	b.n	800426a <_svfiprintf_r+0x46>
 800439e:	4343      	muls	r3, r0
 80043a0:	0035      	movs	r5, r6
 80043a2:	2101      	movs	r1, #1
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	e7a6      	b.n	80042f6 <_svfiprintf_r+0xd2>
 80043a8:	2301      	movs	r3, #1
 80043aa:	425b      	negs	r3, r3
 80043ac:	e7d0      	b.n	8004350 <_svfiprintf_r+0x12c>
 80043ae:	2300      	movs	r3, #0
 80043b0:	200a      	movs	r0, #10
 80043b2:	001a      	movs	r2, r3
 80043b4:	3501      	adds	r5, #1
 80043b6:	6063      	str	r3, [r4, #4]
 80043b8:	7829      	ldrb	r1, [r5, #0]
 80043ba:	1c6e      	adds	r6, r5, #1
 80043bc:	3930      	subs	r1, #48	; 0x30
 80043be:	2909      	cmp	r1, #9
 80043c0:	d903      	bls.n	80043ca <_svfiprintf_r+0x1a6>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0c5      	beq.n	8004352 <_svfiprintf_r+0x12e>
 80043c6:	9209      	str	r2, [sp, #36]	; 0x24
 80043c8:	e7c3      	b.n	8004352 <_svfiprintf_r+0x12e>
 80043ca:	4342      	muls	r2, r0
 80043cc:	0035      	movs	r5, r6
 80043ce:	2301      	movs	r3, #1
 80043d0:	1852      	adds	r2, r2, r1
 80043d2:	e7f1      	b.n	80043b8 <_svfiprintf_r+0x194>
 80043d4:	ab07      	add	r3, sp, #28
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	003a      	movs	r2, r7
 80043da:	0021      	movs	r1, r4
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <_svfiprintf_r+0x1fc>)
 80043de:	9803      	ldr	r0, [sp, #12]
 80043e0:	e000      	b.n	80043e4 <_svfiprintf_r+0x1c0>
 80043e2:	bf00      	nop
 80043e4:	9004      	str	r0, [sp, #16]
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	3301      	adds	r3, #1
 80043ea:	d1d3      	bne.n	8004394 <_svfiprintf_r+0x170>
 80043ec:	89bb      	ldrh	r3, [r7, #12]
 80043ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80043f0:	065b      	lsls	r3, r3, #25
 80043f2:	d400      	bmi.n	80043f6 <_svfiprintf_r+0x1d2>
 80043f4:	e72d      	b.n	8004252 <_svfiprintf_r+0x2e>
 80043f6:	2001      	movs	r0, #1
 80043f8:	4240      	negs	r0, r0
 80043fa:	e72a      	b.n	8004252 <_svfiprintf_r+0x2e>
 80043fc:	ab07      	add	r3, sp, #28
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	003a      	movs	r2, r7
 8004402:	0021      	movs	r1, r4
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <_svfiprintf_r+0x1fc>)
 8004406:	9803      	ldr	r0, [sp, #12]
 8004408:	f000 f87c 	bl	8004504 <_printf_i>
 800440c:	e7ea      	b.n	80043e4 <_svfiprintf_r+0x1c0>
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	08004a54 	.word	0x08004a54
 8004414:	08004a5a 	.word	0x08004a5a
 8004418:	08004a5e 	.word	0x08004a5e
 800441c:	00000000 	.word	0x00000000
 8004420:	08004161 	.word	0x08004161

08004424 <_printf_common>:
 8004424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004426:	0015      	movs	r5, r2
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	688a      	ldr	r2, [r1, #8]
 800442c:	690b      	ldr	r3, [r1, #16]
 800442e:	000c      	movs	r4, r1
 8004430:	9000      	str	r0, [sp, #0]
 8004432:	4293      	cmp	r3, r2
 8004434:	da00      	bge.n	8004438 <_printf_common+0x14>
 8004436:	0013      	movs	r3, r2
 8004438:	0022      	movs	r2, r4
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	3243      	adds	r2, #67	; 0x43
 800443e:	7812      	ldrb	r2, [r2, #0]
 8004440:	2a00      	cmp	r2, #0
 8004442:	d001      	beq.n	8004448 <_printf_common+0x24>
 8004444:	3301      	adds	r3, #1
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	069b      	lsls	r3, r3, #26
 800444c:	d502      	bpl.n	8004454 <_printf_common+0x30>
 800444e:	682b      	ldr	r3, [r5, #0]
 8004450:	3302      	adds	r3, #2
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	2306      	movs	r3, #6
 8004458:	0017      	movs	r7, r2
 800445a:	401f      	ands	r7, r3
 800445c:	421a      	tst	r2, r3
 800445e:	d027      	beq.n	80044b0 <_printf_common+0x8c>
 8004460:	0023      	movs	r3, r4
 8004462:	3343      	adds	r3, #67	; 0x43
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	1e5a      	subs	r2, r3, #1
 8004468:	4193      	sbcs	r3, r2
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	0692      	lsls	r2, r2, #26
 800446e:	d430      	bmi.n	80044d2 <_printf_common+0xae>
 8004470:	0022      	movs	r2, r4
 8004472:	9901      	ldr	r1, [sp, #4]
 8004474:	9800      	ldr	r0, [sp, #0]
 8004476:	9e08      	ldr	r6, [sp, #32]
 8004478:	3243      	adds	r2, #67	; 0x43
 800447a:	47b0      	blx	r6
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d025      	beq.n	80044cc <_printf_common+0xa8>
 8004480:	2306      	movs	r3, #6
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	682a      	ldr	r2, [r5, #0]
 8004486:	68e1      	ldr	r1, [r4, #12]
 8004488:	2500      	movs	r5, #0
 800448a:	4003      	ands	r3, r0
 800448c:	2b04      	cmp	r3, #4
 800448e:	d103      	bne.n	8004498 <_printf_common+0x74>
 8004490:	1a8d      	subs	r5, r1, r2
 8004492:	43eb      	mvns	r3, r5
 8004494:	17db      	asrs	r3, r3, #31
 8004496:	401d      	ands	r5, r3
 8004498:	68a3      	ldr	r3, [r4, #8]
 800449a:	6922      	ldr	r2, [r4, #16]
 800449c:	4293      	cmp	r3, r2
 800449e:	dd01      	ble.n	80044a4 <_printf_common+0x80>
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	18ed      	adds	r5, r5, r3
 80044a4:	2700      	movs	r7, #0
 80044a6:	42bd      	cmp	r5, r7
 80044a8:	d120      	bne.n	80044ec <_printf_common+0xc8>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e010      	b.n	80044d0 <_printf_common+0xac>
 80044ae:	3701      	adds	r7, #1
 80044b0:	68e3      	ldr	r3, [r4, #12]
 80044b2:	682a      	ldr	r2, [r5, #0]
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	42bb      	cmp	r3, r7
 80044b8:	ddd2      	ble.n	8004460 <_printf_common+0x3c>
 80044ba:	0022      	movs	r2, r4
 80044bc:	2301      	movs	r3, #1
 80044be:	9901      	ldr	r1, [sp, #4]
 80044c0:	9800      	ldr	r0, [sp, #0]
 80044c2:	9e08      	ldr	r6, [sp, #32]
 80044c4:	3219      	adds	r2, #25
 80044c6:	47b0      	blx	r6
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d1f0      	bne.n	80044ae <_printf_common+0x8a>
 80044cc:	2001      	movs	r0, #1
 80044ce:	4240      	negs	r0, r0
 80044d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044d2:	2030      	movs	r0, #48	; 0x30
 80044d4:	18e1      	adds	r1, r4, r3
 80044d6:	3143      	adds	r1, #67	; 0x43
 80044d8:	7008      	strb	r0, [r1, #0]
 80044da:	0021      	movs	r1, r4
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	3145      	adds	r1, #69	; 0x45
 80044e0:	7809      	ldrb	r1, [r1, #0]
 80044e2:	18a2      	adds	r2, r4, r2
 80044e4:	3243      	adds	r2, #67	; 0x43
 80044e6:	3302      	adds	r3, #2
 80044e8:	7011      	strb	r1, [r2, #0]
 80044ea:	e7c1      	b.n	8004470 <_printf_common+0x4c>
 80044ec:	0022      	movs	r2, r4
 80044ee:	2301      	movs	r3, #1
 80044f0:	9901      	ldr	r1, [sp, #4]
 80044f2:	9800      	ldr	r0, [sp, #0]
 80044f4:	9e08      	ldr	r6, [sp, #32]
 80044f6:	321a      	adds	r2, #26
 80044f8:	47b0      	blx	r6
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	d0e6      	beq.n	80044cc <_printf_common+0xa8>
 80044fe:	3701      	adds	r7, #1
 8004500:	e7d1      	b.n	80044a6 <_printf_common+0x82>
	...

08004504 <_printf_i>:
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b08b      	sub	sp, #44	; 0x2c
 8004508:	9206      	str	r2, [sp, #24]
 800450a:	000a      	movs	r2, r1
 800450c:	3243      	adds	r2, #67	; 0x43
 800450e:	9307      	str	r3, [sp, #28]
 8004510:	9005      	str	r0, [sp, #20]
 8004512:	9204      	str	r2, [sp, #16]
 8004514:	7e0a      	ldrb	r2, [r1, #24]
 8004516:	000c      	movs	r4, r1
 8004518:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800451a:	2a78      	cmp	r2, #120	; 0x78
 800451c:	d807      	bhi.n	800452e <_printf_i+0x2a>
 800451e:	2a62      	cmp	r2, #98	; 0x62
 8004520:	d809      	bhi.n	8004536 <_printf_i+0x32>
 8004522:	2a00      	cmp	r2, #0
 8004524:	d100      	bne.n	8004528 <_printf_i+0x24>
 8004526:	e0c1      	b.n	80046ac <_printf_i+0x1a8>
 8004528:	2a58      	cmp	r2, #88	; 0x58
 800452a:	d100      	bne.n	800452e <_printf_i+0x2a>
 800452c:	e08c      	b.n	8004648 <_printf_i+0x144>
 800452e:	0026      	movs	r6, r4
 8004530:	3642      	adds	r6, #66	; 0x42
 8004532:	7032      	strb	r2, [r6, #0]
 8004534:	e022      	b.n	800457c <_printf_i+0x78>
 8004536:	0010      	movs	r0, r2
 8004538:	3863      	subs	r0, #99	; 0x63
 800453a:	2815      	cmp	r0, #21
 800453c:	d8f7      	bhi.n	800452e <_printf_i+0x2a>
 800453e:	f7fb fdeb 	bl	8000118 <__gnu_thumb1_case_shi>
 8004542:	0016      	.short	0x0016
 8004544:	fff6001f 	.word	0xfff6001f
 8004548:	fff6fff6 	.word	0xfff6fff6
 800454c:	001ffff6 	.word	0x001ffff6
 8004550:	fff6fff6 	.word	0xfff6fff6
 8004554:	fff6fff6 	.word	0xfff6fff6
 8004558:	003600a8 	.word	0x003600a8
 800455c:	fff6009a 	.word	0xfff6009a
 8004560:	00b9fff6 	.word	0x00b9fff6
 8004564:	0036fff6 	.word	0x0036fff6
 8004568:	fff6fff6 	.word	0xfff6fff6
 800456c:	009e      	.short	0x009e
 800456e:	0026      	movs	r6, r4
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	3642      	adds	r6, #66	; 0x42
 8004574:	1d11      	adds	r1, r2, #4
 8004576:	6019      	str	r1, [r3, #0]
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	7033      	strb	r3, [r6, #0]
 800457c:	2301      	movs	r3, #1
 800457e:	e0a7      	b.n	80046d0 <_printf_i+0x1cc>
 8004580:	6808      	ldr	r0, [r1, #0]
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	1d0a      	adds	r2, r1, #4
 8004586:	0605      	lsls	r5, r0, #24
 8004588:	d50b      	bpl.n	80045a2 <_printf_i+0x9e>
 800458a:	680d      	ldr	r5, [r1, #0]
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	2d00      	cmp	r5, #0
 8004590:	da03      	bge.n	800459a <_printf_i+0x96>
 8004592:	232d      	movs	r3, #45	; 0x2d
 8004594:	9a04      	ldr	r2, [sp, #16]
 8004596:	426d      	negs	r5, r5
 8004598:	7013      	strb	r3, [r2, #0]
 800459a:	4b61      	ldr	r3, [pc, #388]	; (8004720 <_printf_i+0x21c>)
 800459c:	270a      	movs	r7, #10
 800459e:	9303      	str	r3, [sp, #12]
 80045a0:	e01b      	b.n	80045da <_printf_i+0xd6>
 80045a2:	680d      	ldr	r5, [r1, #0]
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	0641      	lsls	r1, r0, #25
 80045a8:	d5f1      	bpl.n	800458e <_printf_i+0x8a>
 80045aa:	b22d      	sxth	r5, r5
 80045ac:	e7ef      	b.n	800458e <_printf_i+0x8a>
 80045ae:	680d      	ldr	r5, [r1, #0]
 80045b0:	6819      	ldr	r1, [r3, #0]
 80045b2:	1d08      	adds	r0, r1, #4
 80045b4:	6018      	str	r0, [r3, #0]
 80045b6:	062e      	lsls	r6, r5, #24
 80045b8:	d501      	bpl.n	80045be <_printf_i+0xba>
 80045ba:	680d      	ldr	r5, [r1, #0]
 80045bc:	e003      	b.n	80045c6 <_printf_i+0xc2>
 80045be:	066d      	lsls	r5, r5, #25
 80045c0:	d5fb      	bpl.n	80045ba <_printf_i+0xb6>
 80045c2:	680d      	ldr	r5, [r1, #0]
 80045c4:	b2ad      	uxth	r5, r5
 80045c6:	4b56      	ldr	r3, [pc, #344]	; (8004720 <_printf_i+0x21c>)
 80045c8:	2708      	movs	r7, #8
 80045ca:	9303      	str	r3, [sp, #12]
 80045cc:	2a6f      	cmp	r2, #111	; 0x6f
 80045ce:	d000      	beq.n	80045d2 <_printf_i+0xce>
 80045d0:	3702      	adds	r7, #2
 80045d2:	0023      	movs	r3, r4
 80045d4:	2200      	movs	r2, #0
 80045d6:	3343      	adds	r3, #67	; 0x43
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	60a3      	str	r3, [r4, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	db03      	blt.n	80045ea <_printf_i+0xe6>
 80045e2:	2204      	movs	r2, #4
 80045e4:	6821      	ldr	r1, [r4, #0]
 80045e6:	4391      	bics	r1, r2
 80045e8:	6021      	str	r1, [r4, #0]
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	d102      	bne.n	80045f4 <_printf_i+0xf0>
 80045ee:	9e04      	ldr	r6, [sp, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00c      	beq.n	800460e <_printf_i+0x10a>
 80045f4:	9e04      	ldr	r6, [sp, #16]
 80045f6:	0028      	movs	r0, r5
 80045f8:	0039      	movs	r1, r7
 80045fa:	f7fb fe1d 	bl	8000238 <__aeabi_uidivmod>
 80045fe:	9b03      	ldr	r3, [sp, #12]
 8004600:	3e01      	subs	r6, #1
 8004602:	5c5b      	ldrb	r3, [r3, r1]
 8004604:	7033      	strb	r3, [r6, #0]
 8004606:	002b      	movs	r3, r5
 8004608:	0005      	movs	r5, r0
 800460a:	429f      	cmp	r7, r3
 800460c:	d9f3      	bls.n	80045f6 <_printf_i+0xf2>
 800460e:	2f08      	cmp	r7, #8
 8004610:	d109      	bne.n	8004626 <_printf_i+0x122>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	07db      	lsls	r3, r3, #31
 8004616:	d506      	bpl.n	8004626 <_printf_i+0x122>
 8004618:	6863      	ldr	r3, [r4, #4]
 800461a:	6922      	ldr	r2, [r4, #16]
 800461c:	4293      	cmp	r3, r2
 800461e:	dc02      	bgt.n	8004626 <_printf_i+0x122>
 8004620:	2330      	movs	r3, #48	; 0x30
 8004622:	3e01      	subs	r6, #1
 8004624:	7033      	strb	r3, [r6, #0]
 8004626:	9b04      	ldr	r3, [sp, #16]
 8004628:	1b9b      	subs	r3, r3, r6
 800462a:	6123      	str	r3, [r4, #16]
 800462c:	9b07      	ldr	r3, [sp, #28]
 800462e:	0021      	movs	r1, r4
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	9805      	ldr	r0, [sp, #20]
 8004634:	9b06      	ldr	r3, [sp, #24]
 8004636:	aa09      	add	r2, sp, #36	; 0x24
 8004638:	f7ff fef4 	bl	8004424 <_printf_common>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d14c      	bne.n	80046da <_printf_i+0x1d6>
 8004640:	2001      	movs	r0, #1
 8004642:	4240      	negs	r0, r0
 8004644:	b00b      	add	sp, #44	; 0x2c
 8004646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004648:	3145      	adds	r1, #69	; 0x45
 800464a:	700a      	strb	r2, [r1, #0]
 800464c:	4a34      	ldr	r2, [pc, #208]	; (8004720 <_printf_i+0x21c>)
 800464e:	9203      	str	r2, [sp, #12]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	6821      	ldr	r1, [r4, #0]
 8004654:	ca20      	ldmia	r2!, {r5}
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	0608      	lsls	r0, r1, #24
 800465a:	d516      	bpl.n	800468a <_printf_i+0x186>
 800465c:	07cb      	lsls	r3, r1, #31
 800465e:	d502      	bpl.n	8004666 <_printf_i+0x162>
 8004660:	2320      	movs	r3, #32
 8004662:	4319      	orrs	r1, r3
 8004664:	6021      	str	r1, [r4, #0]
 8004666:	2710      	movs	r7, #16
 8004668:	2d00      	cmp	r5, #0
 800466a:	d1b2      	bne.n	80045d2 <_printf_i+0xce>
 800466c:	2320      	movs	r3, #32
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	439a      	bics	r2, r3
 8004672:	6022      	str	r2, [r4, #0]
 8004674:	e7ad      	b.n	80045d2 <_printf_i+0xce>
 8004676:	2220      	movs	r2, #32
 8004678:	6809      	ldr	r1, [r1, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	6022      	str	r2, [r4, #0]
 800467e:	0022      	movs	r2, r4
 8004680:	2178      	movs	r1, #120	; 0x78
 8004682:	3245      	adds	r2, #69	; 0x45
 8004684:	7011      	strb	r1, [r2, #0]
 8004686:	4a27      	ldr	r2, [pc, #156]	; (8004724 <_printf_i+0x220>)
 8004688:	e7e1      	b.n	800464e <_printf_i+0x14a>
 800468a:	0648      	lsls	r0, r1, #25
 800468c:	d5e6      	bpl.n	800465c <_printf_i+0x158>
 800468e:	b2ad      	uxth	r5, r5
 8004690:	e7e4      	b.n	800465c <_printf_i+0x158>
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	680d      	ldr	r5, [r1, #0]
 8004696:	1d10      	adds	r0, r2, #4
 8004698:	6949      	ldr	r1, [r1, #20]
 800469a:	6018      	str	r0, [r3, #0]
 800469c:	6813      	ldr	r3, [r2, #0]
 800469e:	062e      	lsls	r6, r5, #24
 80046a0:	d501      	bpl.n	80046a6 <_printf_i+0x1a2>
 80046a2:	6019      	str	r1, [r3, #0]
 80046a4:	e002      	b.n	80046ac <_printf_i+0x1a8>
 80046a6:	066d      	lsls	r5, r5, #25
 80046a8:	d5fb      	bpl.n	80046a2 <_printf_i+0x19e>
 80046aa:	8019      	strh	r1, [r3, #0]
 80046ac:	2300      	movs	r3, #0
 80046ae:	9e04      	ldr	r6, [sp, #16]
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	e7bb      	b.n	800462c <_printf_i+0x128>
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	1d11      	adds	r1, r2, #4
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	6816      	ldr	r6, [r2, #0]
 80046bc:	2100      	movs	r1, #0
 80046be:	0030      	movs	r0, r6
 80046c0:	6862      	ldr	r2, [r4, #4]
 80046c2:	f000 f831 	bl	8004728 <memchr>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d001      	beq.n	80046ce <_printf_i+0x1ca>
 80046ca:	1b80      	subs	r0, r0, r6
 80046cc:	6060      	str	r0, [r4, #4]
 80046ce:	6863      	ldr	r3, [r4, #4]
 80046d0:	6123      	str	r3, [r4, #16]
 80046d2:	2300      	movs	r3, #0
 80046d4:	9a04      	ldr	r2, [sp, #16]
 80046d6:	7013      	strb	r3, [r2, #0]
 80046d8:	e7a8      	b.n	800462c <_printf_i+0x128>
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	0032      	movs	r2, r6
 80046de:	9906      	ldr	r1, [sp, #24]
 80046e0:	9805      	ldr	r0, [sp, #20]
 80046e2:	9d07      	ldr	r5, [sp, #28]
 80046e4:	47a8      	blx	r5
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	d0aa      	beq.n	8004640 <_printf_i+0x13c>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	079b      	lsls	r3, r3, #30
 80046ee:	d415      	bmi.n	800471c <_printf_i+0x218>
 80046f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f2:	68e0      	ldr	r0, [r4, #12]
 80046f4:	4298      	cmp	r0, r3
 80046f6:	daa5      	bge.n	8004644 <_printf_i+0x140>
 80046f8:	0018      	movs	r0, r3
 80046fa:	e7a3      	b.n	8004644 <_printf_i+0x140>
 80046fc:	0022      	movs	r2, r4
 80046fe:	2301      	movs	r3, #1
 8004700:	9906      	ldr	r1, [sp, #24]
 8004702:	9805      	ldr	r0, [sp, #20]
 8004704:	9e07      	ldr	r6, [sp, #28]
 8004706:	3219      	adds	r2, #25
 8004708:	47b0      	blx	r6
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d098      	beq.n	8004640 <_printf_i+0x13c>
 800470e:	3501      	adds	r5, #1
 8004710:	68e3      	ldr	r3, [r4, #12]
 8004712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	42ab      	cmp	r3, r5
 8004718:	dcf0      	bgt.n	80046fc <_printf_i+0x1f8>
 800471a:	e7e9      	b.n	80046f0 <_printf_i+0x1ec>
 800471c:	2500      	movs	r5, #0
 800471e:	e7f7      	b.n	8004710 <_printf_i+0x20c>
 8004720:	08004a65 	.word	0x08004a65
 8004724:	08004a76 	.word	0x08004a76

08004728 <memchr>:
 8004728:	b2c9      	uxtb	r1, r1
 800472a:	1882      	adds	r2, r0, r2
 800472c:	4290      	cmp	r0, r2
 800472e:	d101      	bne.n	8004734 <memchr+0xc>
 8004730:	2000      	movs	r0, #0
 8004732:	4770      	bx	lr
 8004734:	7803      	ldrb	r3, [r0, #0]
 8004736:	428b      	cmp	r3, r1
 8004738:	d0fb      	beq.n	8004732 <memchr+0xa>
 800473a:	3001      	adds	r0, #1
 800473c:	e7f6      	b.n	800472c <memchr+0x4>

0800473e <memcpy>:
 800473e:	2300      	movs	r3, #0
 8004740:	b510      	push	{r4, lr}
 8004742:	429a      	cmp	r2, r3
 8004744:	d100      	bne.n	8004748 <memcpy+0xa>
 8004746:	bd10      	pop	{r4, pc}
 8004748:	5ccc      	ldrb	r4, [r1, r3]
 800474a:	54c4      	strb	r4, [r0, r3]
 800474c:	3301      	adds	r3, #1
 800474e:	e7f8      	b.n	8004742 <memcpy+0x4>

08004750 <memmove>:
 8004750:	b510      	push	{r4, lr}
 8004752:	4288      	cmp	r0, r1
 8004754:	d902      	bls.n	800475c <memmove+0xc>
 8004756:	188b      	adds	r3, r1, r2
 8004758:	4298      	cmp	r0, r3
 800475a:	d303      	bcc.n	8004764 <memmove+0x14>
 800475c:	2300      	movs	r3, #0
 800475e:	e007      	b.n	8004770 <memmove+0x20>
 8004760:	5c8b      	ldrb	r3, [r1, r2]
 8004762:	5483      	strb	r3, [r0, r2]
 8004764:	3a01      	subs	r2, #1
 8004766:	d2fb      	bcs.n	8004760 <memmove+0x10>
 8004768:	bd10      	pop	{r4, pc}
 800476a:	5ccc      	ldrb	r4, [r1, r3]
 800476c:	54c4      	strb	r4, [r0, r3]
 800476e:	3301      	adds	r3, #1
 8004770:	429a      	cmp	r2, r3
 8004772:	d1fa      	bne.n	800476a <memmove+0x1a>
 8004774:	e7f8      	b.n	8004768 <memmove+0x18>
	...

08004778 <_free_r>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	0005      	movs	r5, r0
 800477c:	2900      	cmp	r1, #0
 800477e:	d010      	beq.n	80047a2 <_free_r+0x2a>
 8004780:	1f0c      	subs	r4, r1, #4
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	da00      	bge.n	800478a <_free_r+0x12>
 8004788:	18e4      	adds	r4, r4, r3
 800478a:	0028      	movs	r0, r5
 800478c:	f000 f918 	bl	80049c0 <__malloc_lock>
 8004790:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <_free_r+0x90>)
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <_free_r+0x2c>
 8004798:	6063      	str	r3, [r4, #4]
 800479a:	6014      	str	r4, [r2, #0]
 800479c:	0028      	movs	r0, r5
 800479e:	f000 f917 	bl	80049d0 <__malloc_unlock>
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	d908      	bls.n	80047ba <_free_r+0x42>
 80047a8:	6821      	ldr	r1, [r4, #0]
 80047aa:	1860      	adds	r0, r4, r1
 80047ac:	4283      	cmp	r3, r0
 80047ae:	d1f3      	bne.n	8004798 <_free_r+0x20>
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	1841      	adds	r1, r0, r1
 80047b6:	6021      	str	r1, [r4, #0]
 80047b8:	e7ee      	b.n	8004798 <_free_r+0x20>
 80047ba:	001a      	movs	r2, r3
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <_free_r+0x4e>
 80047c2:	42a3      	cmp	r3, r4
 80047c4:	d9f9      	bls.n	80047ba <_free_r+0x42>
 80047c6:	6811      	ldr	r1, [r2, #0]
 80047c8:	1850      	adds	r0, r2, r1
 80047ca:	42a0      	cmp	r0, r4
 80047cc:	d10b      	bne.n	80047e6 <_free_r+0x6e>
 80047ce:	6820      	ldr	r0, [r4, #0]
 80047d0:	1809      	adds	r1, r1, r0
 80047d2:	1850      	adds	r0, r2, r1
 80047d4:	6011      	str	r1, [r2, #0]
 80047d6:	4283      	cmp	r3, r0
 80047d8:	d1e0      	bne.n	800479c <_free_r+0x24>
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	1841      	adds	r1, r0, r1
 80047e0:	6011      	str	r1, [r2, #0]
 80047e2:	6053      	str	r3, [r2, #4]
 80047e4:	e7da      	b.n	800479c <_free_r+0x24>
 80047e6:	42a0      	cmp	r0, r4
 80047e8:	d902      	bls.n	80047f0 <_free_r+0x78>
 80047ea:	230c      	movs	r3, #12
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	e7d5      	b.n	800479c <_free_r+0x24>
 80047f0:	6821      	ldr	r1, [r4, #0]
 80047f2:	1860      	adds	r0, r4, r1
 80047f4:	4283      	cmp	r3, r0
 80047f6:	d103      	bne.n	8004800 <_free_r+0x88>
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	1841      	adds	r1, r0, r1
 80047fe:	6021      	str	r1, [r4, #0]
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	6054      	str	r4, [r2, #4]
 8004804:	e7ca      	b.n	800479c <_free_r+0x24>
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	200003a0 	.word	0x200003a0

0800480c <sbrk_aligned>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4e0f      	ldr	r6, [pc, #60]	; (800484c <sbrk_aligned+0x40>)
 8004810:	000d      	movs	r5, r1
 8004812:	6831      	ldr	r1, [r6, #0]
 8004814:	0004      	movs	r4, r0
 8004816:	2900      	cmp	r1, #0
 8004818:	d102      	bne.n	8004820 <sbrk_aligned+0x14>
 800481a:	f000 f8bf 	bl	800499c <_sbrk_r>
 800481e:	6030      	str	r0, [r6, #0]
 8004820:	0029      	movs	r1, r5
 8004822:	0020      	movs	r0, r4
 8004824:	f000 f8ba 	bl	800499c <_sbrk_r>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d00a      	beq.n	8004842 <sbrk_aligned+0x36>
 800482c:	2303      	movs	r3, #3
 800482e:	1cc5      	adds	r5, r0, #3
 8004830:	439d      	bics	r5, r3
 8004832:	42a8      	cmp	r0, r5
 8004834:	d007      	beq.n	8004846 <sbrk_aligned+0x3a>
 8004836:	1a29      	subs	r1, r5, r0
 8004838:	0020      	movs	r0, r4
 800483a:	f000 f8af 	bl	800499c <_sbrk_r>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	d101      	bne.n	8004846 <sbrk_aligned+0x3a>
 8004842:	2501      	movs	r5, #1
 8004844:	426d      	negs	r5, r5
 8004846:	0028      	movs	r0, r5
 8004848:	bd70      	pop	{r4, r5, r6, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	200003a4 	.word	0x200003a4

08004850 <_malloc_r>:
 8004850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004852:	2203      	movs	r2, #3
 8004854:	1ccb      	adds	r3, r1, #3
 8004856:	4393      	bics	r3, r2
 8004858:	3308      	adds	r3, #8
 800485a:	0006      	movs	r6, r0
 800485c:	001f      	movs	r7, r3
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d232      	bcs.n	80048c8 <_malloc_r+0x78>
 8004862:	270c      	movs	r7, #12
 8004864:	42b9      	cmp	r1, r7
 8004866:	d831      	bhi.n	80048cc <_malloc_r+0x7c>
 8004868:	0030      	movs	r0, r6
 800486a:	f000 f8a9 	bl	80049c0 <__malloc_lock>
 800486e:	4d32      	ldr	r5, [pc, #200]	; (8004938 <_malloc_r+0xe8>)
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	001c      	movs	r4, r3
 8004874:	2c00      	cmp	r4, #0
 8004876:	d12e      	bne.n	80048d6 <_malloc_r+0x86>
 8004878:	0039      	movs	r1, r7
 800487a:	0030      	movs	r0, r6
 800487c:	f7ff ffc6 	bl	800480c <sbrk_aligned>
 8004880:	0004      	movs	r4, r0
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	d11e      	bne.n	80048c4 <_malloc_r+0x74>
 8004886:	682c      	ldr	r4, [r5, #0]
 8004888:	0025      	movs	r5, r4
 800488a:	2d00      	cmp	r5, #0
 800488c:	d14a      	bne.n	8004924 <_malloc_r+0xd4>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	0029      	movs	r1, r5
 8004892:	18e3      	adds	r3, r4, r3
 8004894:	0030      	movs	r0, r6
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	f000 f880 	bl	800499c <_sbrk_r>
 800489c:	9b01      	ldr	r3, [sp, #4]
 800489e:	4283      	cmp	r3, r0
 80048a0:	d143      	bne.n	800492a <_malloc_r+0xda>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	3703      	adds	r7, #3
 80048a6:	1aff      	subs	r7, r7, r3
 80048a8:	2303      	movs	r3, #3
 80048aa:	439f      	bics	r7, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	2f0c      	cmp	r7, #12
 80048b0:	d200      	bcs.n	80048b4 <_malloc_r+0x64>
 80048b2:	270c      	movs	r7, #12
 80048b4:	0039      	movs	r1, r7
 80048b6:	0030      	movs	r0, r6
 80048b8:	f7ff ffa8 	bl	800480c <sbrk_aligned>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d034      	beq.n	800492a <_malloc_r+0xda>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	19df      	adds	r7, r3, r7
 80048c4:	6027      	str	r7, [r4, #0]
 80048c6:	e013      	b.n	80048f0 <_malloc_r+0xa0>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dacb      	bge.n	8004864 <_malloc_r+0x14>
 80048cc:	230c      	movs	r3, #12
 80048ce:	2500      	movs	r5, #0
 80048d0:	6033      	str	r3, [r6, #0]
 80048d2:	0028      	movs	r0, r5
 80048d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	1bd1      	subs	r1, r2, r7
 80048da:	d420      	bmi.n	800491e <_malloc_r+0xce>
 80048dc:	290b      	cmp	r1, #11
 80048de:	d917      	bls.n	8004910 <_malloc_r+0xc0>
 80048e0:	19e2      	adds	r2, r4, r7
 80048e2:	6027      	str	r7, [r4, #0]
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d111      	bne.n	800490c <_malloc_r+0xbc>
 80048e8:	602a      	str	r2, [r5, #0]
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	6053      	str	r3, [r2, #4]
 80048f0:	0030      	movs	r0, r6
 80048f2:	0025      	movs	r5, r4
 80048f4:	f000 f86c 	bl	80049d0 <__malloc_unlock>
 80048f8:	2207      	movs	r2, #7
 80048fa:	350b      	adds	r5, #11
 80048fc:	1d23      	adds	r3, r4, #4
 80048fe:	4395      	bics	r5, r2
 8004900:	1aea      	subs	r2, r5, r3
 8004902:	429d      	cmp	r5, r3
 8004904:	d0e5      	beq.n	80048d2 <_malloc_r+0x82>
 8004906:	1b5b      	subs	r3, r3, r5
 8004908:	50a3      	str	r3, [r4, r2]
 800490a:	e7e2      	b.n	80048d2 <_malloc_r+0x82>
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	e7ec      	b.n	80048ea <_malloc_r+0x9a>
 8004910:	6862      	ldr	r2, [r4, #4]
 8004912:	42a3      	cmp	r3, r4
 8004914:	d101      	bne.n	800491a <_malloc_r+0xca>
 8004916:	602a      	str	r2, [r5, #0]
 8004918:	e7ea      	b.n	80048f0 <_malloc_r+0xa0>
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	e7e8      	b.n	80048f0 <_malloc_r+0xa0>
 800491e:	0023      	movs	r3, r4
 8004920:	6864      	ldr	r4, [r4, #4]
 8004922:	e7a7      	b.n	8004874 <_malloc_r+0x24>
 8004924:	002c      	movs	r4, r5
 8004926:	686d      	ldr	r5, [r5, #4]
 8004928:	e7af      	b.n	800488a <_malloc_r+0x3a>
 800492a:	230c      	movs	r3, #12
 800492c:	0030      	movs	r0, r6
 800492e:	6033      	str	r3, [r6, #0]
 8004930:	f000 f84e 	bl	80049d0 <__malloc_unlock>
 8004934:	e7cd      	b.n	80048d2 <_malloc_r+0x82>
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	200003a0 	.word	0x200003a0

0800493c <_realloc_r>:
 800493c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800493e:	0007      	movs	r7, r0
 8004940:	000e      	movs	r6, r1
 8004942:	0014      	movs	r4, r2
 8004944:	2900      	cmp	r1, #0
 8004946:	d105      	bne.n	8004954 <_realloc_r+0x18>
 8004948:	0011      	movs	r1, r2
 800494a:	f7ff ff81 	bl	8004850 <_malloc_r>
 800494e:	0005      	movs	r5, r0
 8004950:	0028      	movs	r0, r5
 8004952:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004954:	2a00      	cmp	r2, #0
 8004956:	d103      	bne.n	8004960 <_realloc_r+0x24>
 8004958:	f7ff ff0e 	bl	8004778 <_free_r>
 800495c:	0025      	movs	r5, r4
 800495e:	e7f7      	b.n	8004950 <_realloc_r+0x14>
 8004960:	f000 f83e 	bl	80049e0 <_malloc_usable_size_r>
 8004964:	9001      	str	r0, [sp, #4]
 8004966:	4284      	cmp	r4, r0
 8004968:	d803      	bhi.n	8004972 <_realloc_r+0x36>
 800496a:	0035      	movs	r5, r6
 800496c:	0843      	lsrs	r3, r0, #1
 800496e:	42a3      	cmp	r3, r4
 8004970:	d3ee      	bcc.n	8004950 <_realloc_r+0x14>
 8004972:	0021      	movs	r1, r4
 8004974:	0038      	movs	r0, r7
 8004976:	f7ff ff6b 	bl	8004850 <_malloc_r>
 800497a:	1e05      	subs	r5, r0, #0
 800497c:	d0e8      	beq.n	8004950 <_realloc_r+0x14>
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	0022      	movs	r2, r4
 8004982:	429c      	cmp	r4, r3
 8004984:	d900      	bls.n	8004988 <_realloc_r+0x4c>
 8004986:	001a      	movs	r2, r3
 8004988:	0031      	movs	r1, r6
 800498a:	0028      	movs	r0, r5
 800498c:	f7ff fed7 	bl	800473e <memcpy>
 8004990:	0031      	movs	r1, r6
 8004992:	0038      	movs	r0, r7
 8004994:	f7ff fef0 	bl	8004778 <_free_r>
 8004998:	e7da      	b.n	8004950 <_realloc_r+0x14>
	...

0800499c <_sbrk_r>:
 800499c:	2300      	movs	r3, #0
 800499e:	b570      	push	{r4, r5, r6, lr}
 80049a0:	4d06      	ldr	r5, [pc, #24]	; (80049bc <_sbrk_r+0x20>)
 80049a2:	0004      	movs	r4, r0
 80049a4:	0008      	movs	r0, r1
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	f7fc f8de 	bl	8000b68 <_sbrk>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d103      	bne.n	80049b8 <_sbrk_r+0x1c>
 80049b0:	682b      	ldr	r3, [r5, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d000      	beq.n	80049b8 <_sbrk_r+0x1c>
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	200003a8 	.word	0x200003a8

080049c0 <__malloc_lock>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4802      	ldr	r0, [pc, #8]	; (80049cc <__malloc_lock+0xc>)
 80049c4:	f000 f814 	bl	80049f0 <__retarget_lock_acquire_recursive>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	200003ac 	.word	0x200003ac

080049d0 <__malloc_unlock>:
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4802      	ldr	r0, [pc, #8]	; (80049dc <__malloc_unlock+0xc>)
 80049d4:	f000 f80d 	bl	80049f2 <__retarget_lock_release_recursive>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	200003ac 	.word	0x200003ac

080049e0 <_malloc_usable_size_r>:
 80049e0:	1f0b      	subs	r3, r1, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	1f18      	subs	r0, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da01      	bge.n	80049ee <_malloc_usable_size_r+0xe>
 80049ea:	580b      	ldr	r3, [r1, r0]
 80049ec:	18c0      	adds	r0, r0, r3
 80049ee:	4770      	bx	lr

080049f0 <__retarget_lock_acquire_recursive>:
 80049f0:	4770      	bx	lr

080049f2 <__retarget_lock_release_recursive>:
 80049f2:	4770      	bx	lr

080049f4 <_init>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr

08004a00 <_fini>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr
